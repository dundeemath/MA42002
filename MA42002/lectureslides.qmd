---
title: "Lecture slides"
author: "Philip Murray"
format: beamer
---

## Lecture 1 

* Introduction to MA42002
* Conservation equations
* Examples of spatially homogeneous models



## Conservation equations
$$
\begin{aligned}
\begin{pmatrix}
\text{rate of change}\\
\text{ in the population density} 
\end{pmatrix}
&= \begin{pmatrix}
\text{spatial movement}
\end{pmatrix}
\\
 &+\begin{pmatrix}
 \text{birth, growth, death},\\
 \text{production or degradation}\\
  \text{due to chemical reactions} 
\end{pmatrix}
\end{aligned}
$$

\vspace{5cm}


#  Spatially homogeneous models (MA32009 revision)

## Example problem - bacteria in a dish
$$\begin{aligned}
N(t+\Delta t) &=  \quad N(t)   + \quad  K N(t) \Delta t.
\end{aligned} 
$$

\vspace{5cm}

## A model for cell growth under nutrient depletion

$$
\begin{aligned}
\frac{dN}{dt} &= K(c) N = \kappa cN,  \\
 \frac{ dc}{dt} &= - \alpha \frac{dN}{dt} = - \alpha   \kappa c N,  
 \end{aligned}
$${#eq-c_1}

\vspace{5cm}




## Leading to the logistic growth equation
The last equation can be rewritten as
$$  
\frac{dN}{dt} = \rho  N \,  (1 - \frac N B)  \qquad \quad N(0)= N_0, 
$$ {#eq-n_5}

## Can also consider other biological processes




## Exercise

Consider a well mixed bio reactor. 

A biologist cultures an initial cell population of size $N_0$ in the bioreactor for 72 h.

Cells undergo division with a period of 14 h.

Each cell produces a non-degradable waste product, $W$, at rate $k_1$.

When total waste levels exceed a threshold, $W^*$, cell division stops. Otherwise the cell population grows exponentially.

How many cells are there at the end of the experiment?


## Model development


::: {.callout-note}
## Model checklist
1. Variables (dependent, indepedent ?)
2. Schematic diagram - what processes are being modelled?
3. Governing equations?
4. Define model parameters?
5. Initial conditions?
:::

## Exercise solution

## Recap

* Is course layout clear
* Introduction to conservation equation
* Deriving spatially homogeneous models



## Lecture 2 

* Continue example
* Introduce SIR model
* Introduce an activator inhibitor model
* Derive a conservation equation

## Exercise

Consider a well mixed bio reactor. 

A biologist cultures an initial cell population of size $N_0$ in the bioreactor for 72 h.

Cells undergo division with a period of 14 h.

Each cell produces a non-degradable waste product, $W$, at rate $k_1$.

When total waste levels exceed a threshold, $W^*$, cell division stops. Otherwise the cell population grows exponentially.

How many cells are there at the end of the experiment?

##  The SIR model (used in Chapter 7)

Consider the SIR model equations:
$$
\begin{aligned}
\frac{d S}{ dt} &= -rIS, \\
\frac{d I}{ dt} &= rIS - aI, \\
\frac{d R}{ dt} &= aI.
\end{aligned}
$$

What are the variables?
What are the parameters?

Identify an expression for the reproduction number, $R_0$.

Hence explain why the condition $R_0<1$ is necessary to avoid an epidemic?

## SIR model Calculations
$$
\begin{aligned}
\frac{d S}{ dt} &= -rIS, \\
\frac{d I}{ dt} &= rIS - aI, \\
\frac{d R}{ dt} &= aI.
\end{aligned}
$$

\vspace{6cm}

##  An activator inhibitor model (used in Chapter 6)


Assume that species A is produced at constant rate $k_1$ and degrades at rate $k_2$. 

Assume that B is produced at a constant rate, $k_4$.

Consider the reaction schematic
$$
2A+B \rightarrow 3A,
$$
with reaction rate $k_3$.

Write down governing ODEs.

\vspace{3cm}


## Activator-inhibitor model 

Consider the ODEs
$$
\begin{aligned}
\frac{d a}{ dt} &= k_1 - k_2 a + k_3 a^2 b,  \\
\frac{d b}{ dt} &= k_4 - k_3 a^2 b,
\end{aligned}
$$

Identify the steady state of the ODEs.
How would you compute linear stability of the steady state?

\vspace{5cm}

## Recap

* Introduced SIR and activator-inhibitor models
* Computed steady states and stability analysis



## Lecture 3 Spatiotemporal models

* Derive conservation PDEs
* Consider different models of fluxes

## Spatiotemporal models - derivation
Consider a spatial domain $V$. A conservation equation can be written either in terms of the mass or number of particles of a species as follows:

$$
\begin{aligned}
\begin{pmatrix}
\text{rate of change of}\\
\text{number of particles} \\
\text{per unit time } 
\end{pmatrix}
&= \begin{pmatrix}
\text{rate of entry of}\\
\text{particles into $V$}\\
\text{per unit time}
\end{pmatrix}
- \begin{pmatrix}
\text{rate of exit of }\\
\text{particles from $V$}\\
\text{per unit time}
\end{pmatrix} \\
& + 
 \begin{pmatrix}
 \text{rate of degradation}\\
 \text{or creation of particles }\\
  \text{in $V$ per unit time} 
\end{pmatrix}
\end{aligned}
$$


## Deriving a conservation equation in 1D
$$
\begin{aligned}
\frac{\partial}{\partial t} \int_x^{x+\Delta x} c(\tilde x, t) A d\tilde x &= J(x,t) \, A  - J(x+\Delta x,t) \, A \\
 &+\int_x^{x + \Delta x}  f(\tilde x, t, c(\tilde x, t))\,  A \, d \tilde x.
\end{aligned}
$$ {#eq-concerv_01}

\vspace{7cm}


## A conservation PDE in 1D

$$
\frac{\partial}{\partial t} c(x,t)  = - \frac  {\partial} { \partial x} J(x,t) + f(x,t ,c(x,t)).
$$ {#eq-concerv_3}

\vspace{5 cm}

## Generalising to $R^n$
$$
\frac{\partial}{\partial t} \int_V c(x,t) \, dx = - \int_{S} J(x,t) \cdot {\mathbf{n}} \, d\sigma + \int_V f(x,t ,c)dx.
$$
\vspace{5 cm}



##  Fluxes - Fickian diffusion
  $$
    {\mathbf{J}} = - D\nabla c,
  $$ {#eq-diffusion}

  \vspace{7cm}

##  Fluxes - Nonlinear diffusion
$$
  D = D(c) , \qquad \text{ e.g. }\,   D(c)= D_0 c^m, \quad D_0 >0, 
$$

Hence
$$
J=-D(c)\nabla c
$$ 

\vspace{7cm}

## Fluxes - Convection/advection
$$
  {\mathbf{J}} = \mathbf{v}c,
$$ {#eq-diffusion}

\vspace{7cm}

##  Fluxes - Taxis
$$
    {\mathbf{J}} = \chi(a) c \nabla a,  
$$

## Domain of definition of the problem


## Lecture 4

*  Boundary and initial conditions
*  Nondimensionalisation
*  Model formulation


## Boundary conditions

* Dirichlet
* Neumann
* Robin 


\vspace{7cm}

## Initial conditions




\vspace{7cm}

## Formulating a model




\vspace{7cm}
## Lecture 5

*  Introduce a linear reaction diffusion model
*  Diffusion


## Linear reaction diffusion equation

$$
\frac{\partial c}{\partial t} = D \nabla^2 c + f(c), \quad c \equiv c( {\mathbf{x}} , t ), \;\;  {\mathbf{x}} \in \mathbb R^n, \, \, t >0.
$$
so in 1D Cartesian coordinates
$$
\frac{\partial c}{\partial t} = D \frac{\partial^2 c}{\partial x^2}  + f(c), \quad x\in \mathbb R, \, \, t >0.
$$ 

##  1D diffusion equation with delta IC


$$
\frac{\partial c}{\partial t} = D \frac{\partial^2 c}{\partial x^2},   \quad x\in \mathbb R, \, \, t >0.
$$ {#eq-heat_eq} 

$$
c(x_0 , 0) = \delta_0(x)\qquad x \in \mathbb R, 
$$ {#eq-heat_IC} where $\delta_0$ is a *Dirac delta distribution* (Dirac measure) satisfying $$
\int_{-\infty}^{+\infty} \delta_0(x) = 1 \quad \text{ and } \quad \int_{-\infty}^{+\infty} f(x) \delta_0(x) = f(0) , \text{ for continuous } f. 
$$

## Numerical solution

```{python .content-visible unless-format="pdf"}
#| label: fig-diffusionpde
#| fig-cap: 
#|  - "Numerical solution of diffusion equation."
#|  - "Exact solution of diffusion equation."
#| code-fold: True

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt


# define domain size
T=10
L=10

# discretise domain
N_x=100
N_t=120
t=np.linspace(0,T,N_t)
x=np.linspace(0,L,N_x)-L/2
dx=L/(N_x-1)
dt=T/(N_t-1)

# Define model parameters
D=1.5
epsilon=0.1


# Define initial data
u_0=1/(epsilon*np.sqrt(np.pi))*np.exp(-x**2/epsilon**2)

# define rhs of PDE
def diffusionPDErhs(u,t):
    N_x=len(u)
    f=np.zeros_like(u)

    # Interior points on the domain
    for i in range(1,N_x-1):
      f[i]=D/dx**2*(u[i-1]-2*u[i]+u[i+1])  
    
    # Boundary at x=0 - flux is zero
    i=0
    f[i]=D/dx**2*(-u[i]+u[i+1])
    
    # Boundary at x=L - flux is zero
    i=N_x-1
    f[i]=D/dx**2*(u[i-1]-u[i])
    return f  

# Use method of lines to solve PDE
sol=odeint(diffusionPDErhs,u_0,t)

# Generate x and t mesh to compute exact solution
[x_mesh,t_mesh]=np.meshgrid(x,t)

c_exact=1/np.sqrt(4*np.pi*D*t_mesh)*np.exp(-x_mesh**2/(4*D*t_mesh))

# Plot solutions and compare
fig,ax=plt.subplots()
ax.plot(x, sol[1,:], 'r')
ax.plot(x, sol[4,:], 'b')
ax.plot(x, sol[8,:], 'm')
ax.plot(x, sol[12,:], 'k')
plt.legend(['t='+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])
plt.xlabel('$x$')
plt.ylabel('$c$')

plt.grid()
plt.show()

fig,ax=plt.subplots()
ax.plot(x, c_exact[1,:], 'r')
ax.plot(x, c_exact[4,:], 'b')
ax.plot(x, c_exact[8,:], 'm')
ax.plot(x, c_exact[12,:], 'k')
plt.legend(['t='+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])
plt.xlabel('$x$')
plt.ylabel('$c$')
plt.grid()
plt.show()
```



## An exact solution computed using a *similarity* variable

Consider the diffusion @eq-heat_eq with initial condition @eq-heat_IC. 

Introduce the similarity variable
$$
\eta=\frac{x}{\sqrt{Dt}}
$$
and look for solution of the form
$$
c(x,t)=\frac{1}{\sqrt{Dt}}F(\eta).
$$

Hence it can be shown that the explicit (analytic) solution is given by 
$$
c(x, t) = \frac1{\sqrt{4 \pi D t}} \exp \left( - \frac{ x^2}{ 4Dt} \right).
$$ {#eq-fund_sol}

## The 1D diffusion equation for arbitrary initial condition

For a general initial condition $c(x, 0) = c_0(x)$ for $x\in \mathbb R$: 
$$
c(x, t) = \int_{-\infty}^{+\infty} \frac{c_0(y)}{\sqrt{4 \pi D t}} \exp \left( - \frac{ (x-y)^2}{ 4Dt} \right) dy.
$$

## Key properties of the (linear) diffusion equation (heat equation)

-   The solution is infinitely smooth.
-   The solution $c(x,t)$ stays positive for all $t >0$ and $x \in \mathbb R$ if $c(x,0) >0$ for $x \in \mathbb R$.
-   The solution \`\`propagates'' with infinite speed i.e. for any $t > 0$, the solution is everywhere in $\mathbb R$.
-   If we change the initial data $c(x,0)$ (continuously) then the solution also changes (continuously).

## Diffusive transit time

$$
D \frac{ d^2 c}{dx^2} = 0  \quad \text{ in } (0,L), \quad c(0) = C_0, \, c(L) = 0 .
$$

\vspace{5cm}

## Diffusion as a description of random walk

Suppose that the probability of a particle hopping distance $\Delta x$ to the right in time $\Delta t$ is 
$$
\lambda_R \Delta t.
$$ 
Similarly, the probability of hopping a distance $\Delta x$ to the left is $$
\lambda_L \Delta t.
$$

## Numerical simulation

```{python}
#| label: fig-randomwalksim
#| fig-cap: "Numerical implementation of random walk"
#| code-fold: True

# This code simulates random walk of a large number of particles and compares distribution in space with a solution of the diffusion equation 

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import random


# Define total num particles
N_particles=400

# Discretise domain
L=50
N_x=200

T=500
N_t=25000
dt=T/N_t
x=np.linspace(0,L,N_x)-L/2
t=np.linspace(dt,T,N_t)
# Model parameters
D=0.1

# Relate diffusion coefficient to probability of moving distance dx in time dt
move_probability=D*dt/dx**2

# Initialise particle positions at the origin
particle_positions=np.zeros((N_t,N_particles),dtype=float)

# loop over time
for i in range(1,N_t):
  # loop over particles
  for j in range(N_particles):

    # randomly sample uniform random number on U_[0,1]
    r=random.random()
    # move particle j right
    new_particle_position=particle_positions[i-1,j]
    if r<move_probability:
      new_particle_position+=dx
    # move particle j left  
    elif r<2*move_probability:
      new_particle_position-=dx
    particle_positions[i,j]=new_particle_position


# Compute exaxct solution of diffusion equation
[x_mesh,t_mesh]=np.meshgrid(x,t)
c_exact=1/np.sqrt(4*np.pi*D*t_mesh)*np.exp(-x_mesh**2/(4*D*t_mesh))

# Compare normalised histogram of particule positions with PDE solution
fig,ax=plt.subplots(2,2)
ax[0,0].hist(particle_positions[5,:],density=True)
ax[0,0].plot(x, c_exact[5,:], 'r')
ax[0,0].set_title('$t=$'+str(t[4]))

ax[0,1].hist(particle_positions[500,:],density=True)
ax[0,1].plot(x, c_exact[500,:], 'm')
ax[0,1].set_title('$t=$'+str(t[500]))

ax[1,0].hist(particle_positions[1000,:],density=True)
ax[1,0].plot(x, c_exact[1000,:], 'b')
ax[1,0].set_title('$t=$'+str(t[1000]))

ax[1,1].hist(particle_positions[1500,:],density=True)
ax[1,1].plot(x, c_exact[1500,:], 'k')
ax[1,1].set_title('$t=$'+str(t[1500]))

ax[0,0].set_xlim([-L/2,L/2])
ax[0,1].set_xlim([-L/2,L/2])
ax[1,0].set_xlim([-L/2,L/2])
ax[1,1].set_xlim([-L/2,L/2])

ax[0,0].set_xlabel('$x$')
ax[0,1].set_xlabel('$x$')
ax[1,0].set_xlabel('$x$')
ax[1,1].set_xlabel('$x$')

ax[0,0].set_ylabel('$c$')
ax[0,1].set_ylabel('$c$')
ax[1,0].set_ylabel('$c$')
ax[1,1].set_ylabel('$c$')

plt.tight_layout()
plt.show()
```

## Derivation

Let $c(x,t)$ represent the particle density at spatial location $x$ and time $t$.

A conservation equation for $c$ is given by 
$$
\begin{aligned}
c(x, t+ \Delta t) &= c(x, t)  + \lambda_R \Delta t c(x- \Delta x, t) - \lambda_R \Delta t c(x, t) + \\
&\lambda_L \Delta t c(x+ \Delta x, t) - \lambda_L \Delta t c (x,t).
\end{aligned}
$$