---
title: "Linear reaction diffusion equations"
format: html
---

We will now consider equations (and systems of such equations) of the general form:

$$
\frac{\partial c}{\partial t} = D \nabla^2 c + f(c), \quad c \equiv c( {\mathbf{x}} , t ), \;\;  {\mathbf{x}} \in \mathbb R^n, \, \, t >0.
$$

Such an equation is known as a *reaction-diffusion equation*, being composed of a reaction term, $f(c)$, and a diffusion term, $D \nabla^2 c$. Reaction-diffusion equations have many applications in biological systems e.g. travelling waves of invasion, pattern formation, spread of infectious diseases. For most of the remainder of the course we will consider such systems in one-space dimension i.e. $x \in \mathbb R$.

Consider the one-dimensional reaction-diffusion equation with constant diffusion coefficient $D > 0$: 
$$
\frac{\partial c}{\partial t} = D \frac{\partial^2 c}{\partial x^2}  + f(c), \quad x\in \mathbb R, \, \, t >0.
$$ {#eq-general1Drd}

## One-dimensional diffusion equations

In order to provide some insight into the structure of solutions of reaction-diffusion equations, we make an initial simplifying assumption i.e. we assume $f(c)=0$, and obtain the linear diffusion equation (or heat equation):

$$
\frac{\partial c}{\partial t} = D \frac{\partial^2 c}{\partial x^2},   \quad x\in \mathbb R, \, \, t >0.
$$ {#eq-heat_eq} This equation is used to model the evolution of the concentration of a chemical in a long thin tube, or the temperature of a long thin rod.

We assume that the solution is initialised to be non-zero at one point $x=0$, i.e. $$
c(x_0 , 0) = \delta_0(x)\qquad x \in \mathbb R, 
$$ {#eq-heat_IC} where $\delta_0$ is a *Dirac delta distribution* (Dirac measure) satisfying $$
\int_{-\infty}^{+\infty} \delta_0(x) = 1 \quad \text{ and } \quad \int_{-\infty}^{+\infty} f(x) \delta_0(x) = f(0) , \text{ for continuous } f. 
$$

### Fundamental solution

It can be shown that the sequence of functions $\{ \phi_\varepsilon(x) \}$ given by $$
\frac 1{\varepsilon \sqrt{\pi} } e^{ - \frac{x^2}{ \varepsilon^2}}
$$

```{python}
#| label: fig-approxdelta
#| fig-cap: "Approximation of Dirac delta function."
#| code-fold: True

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt


# define domain size
L=0.2

# discretise domain
N_x=10000
x=np.linspace(0,L,N_x)-L/2
dx=L/(N_x-1)



epsilon_0=0.1
epsilon_1=0.01
epsilon_2=0.005

# Define initial data
u_0=1/(epsilon_0*np.sqrt(np.pi))*np.exp(-x**2/epsilon_0**2)
u_1=1/(epsilon_1*np.sqrt(np.pi))*np.exp(-x**2/epsilon_1**2)
u_2=1/(epsilon_2*np.sqrt(np.pi))*np.exp(-x**2/epsilon_2**2)


fig, ax=plt.subplots()
ax.plot(x,u_0,x,u_1,x,u_2)
plt.legend(['$\epsilon=$'+str(epsilon_0),'$\epsilon=$'+str(epsilon_1),'$\epsilon=$'+str(epsilon_2)])
plt.show()
```

converges to $\delta_0(x)$ as $\varepsilon \to 0$ (in the sense of distributions or generalized functions).

Then for the diffusion @eq-heat_eq with initial condition @eq-heat_IC, it can be shown that the explicit (analytic) solution is given by $$
c(x, t) = \frac1{\sqrt{4 \pi D t}} \exp \left( - \frac{ x^2}{ 4Dt} \right).
$$ {#eq-fund_sol}

This is known as the *fundamental* solution of the diffusion equation in $\mathbb R$.

We also have, for general initial condition $c(x, 0) = c_0(x)$ for $x\in \mathbb R$: $$
c(x, t) = \int_{-\infty}^{+\infty} \frac{c_0(y)}{\sqrt{4 \pi D t}} \exp \left( - \frac{ (x-y)^2}{ 4Dt} \right) dy.
$$

This result can be generalized to $\mathbb R^n\times (0,\infty)$ where the fundamental solution has the form $$
c(x,t) =  \frac 1{(4 \pi D t)^{n/2}} \exp \left( - \frac{ (x_{1}^{2} + x_{2}^{2} + \ldots + x_{n}^{2})}{ 4Dt} \right).
$$

### Numerical solution

In @fig-diffusionpde we compute a numerical solution of the diffusion equation and compare it with the exact solution given by @eq-fund_sol.

```{python .content-visible unless-format="pdf"}
#| label: fig-diffusionpde
#| fig-cap: 
#|  - "Numerical solution of diffusion equation."
#|  - "Exact solution of diffusion equation."
#| code-fold: True

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt


# define domain size
T=10
L=10

# discretise domain
N_x=100
N_t=120
t=np.linspace(0,T,N_t)
x=np.linspace(0,L,N_x)-L/2
dx=L/(N_x-1)
dt=T/(N_t-1)

# Define model parameters
D=1.5
epsilon=0.1


# Define initial data
u_0=1/(epsilon*np.sqrt(np.pi))*np.exp(-x**2/epsilon**2)

# define rhs of PDE
def diffusionPDErhs(u,t):
    N_x=len(u)
    f=np.zeros_like(u)

    # Interior points on the domain
    for i in range(1,N_x-1):
      f[i]=D/dx**2*(u[i-1]-2*u[i]+u[i+1])  
    
    # Boundary at x=0 - flux is zero
    i=0
    f[i]=D/dx**2*(-u[i]+u[i+1])
    
    # Boundary at x=L - flux is zero
    i=N_x-1
    f[i]=D/dx**2*(u[i-1]-u[i])
    return f  

# Use method of lines to solve PDE
sol=odeint(diffusionPDErhs,u_0,t)

# Generate x and t mesh to compute exact solution
[x_mesh,t_mesh]=np.meshgrid(x,t)

c_exact=1/np.sqrt(4*np.pi*D*t_mesh)*np.exp(-x_mesh**2/(4*D*t_mesh))

# Plot solutions and compare
fig,ax=plt.subplots()
ax.plot(x, sol[1,:], 'r')
ax.plot(x, sol[4,:], 'b')
ax.plot(x, sol[8,:], 'm')
ax.plot(x, sol[12,:], 'k')
plt.legend(['t='+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])
plt.xlabel('$x$')
plt.ylabel('$c$')

plt.grid()
plt.show()

fig,ax=plt.subplots()
ax.plot(x, c_exact[1,:], 'r')
ax.plot(x, c_exact[4,:], 'b')
ax.plot(x, c_exact[8,:], 'm')
ax.plot(x, c_exact[12,:], 'k')
plt.legend(['t='+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])
plt.xlabel('$x$')
plt.ylabel('$c$')
plt.grid()
plt.show()
```

### Key properties of the (linear) diffusion equation (heat equation)

-   The solution is infinitely smooth.
-   The solution $c(x,t)$ stays positive for all $t >0$ and $x \in \mathbb R$ if $c(x,0) >0$ for $x \in \mathbb R$.
-   The solution \`\`propagates'' with infinite speed i.e. for any $t > 0$, the solution is everywhere in $\mathbb R$.
-   If we change the initial data $c(x,0)$ (continuously) then the solution also changes (continuously).

### Diffusive transit time

We now demonstrate the connection between time and space in diffusion equations
Consider particles of concentration $c(x,t)$ diffusing with constant diffusion $D$ in a one-dimensional domain $(0,L)$, with a constant concentration at one boundary and removed by a sink at the other boundary. At steady-state, the equation governing the concentration is given by:

$$
D \frac{ d^2 c}{dx^2} = 0  \quad \text{ in } (0,L), \quad c(0) = C_0, \, c(L) = 0 .
$$

The solution (**Exercise**) is: $$
c(x) = C_0 \left( 1- \frac x L\right).
$$ Then the number of particles entering at $x=0$ due to diffusive flux (Fickian diffusion) is: $$
J = - D \frac{ dc}{ dx} = D \frac{ C_0}{L},  
$$

In the middle of the domain the particle concentration is
$$
c(\frac{L}{2})=\frac{C_0}{2}.
$$

A typical particle speed is approximated by
$$
 \frac{J}{c} = \frac{D \frac{ C_0}{L}}{\frac{C_0}{2}} = \frac{2D}{L}
$$

Travelling at this speed,  the average time it takes a particle to travel a distance, $L$, is 
$$
\tau = \frac{\textrm{distance}}{\textrm{speed}}=\dfrac{L^2}{2D.}
$$ 
Hence the average distance through which diffusion transports a particle in a time $\tau$ is $L= \sqrt{ 2D\tau}$.


### Diffusion as the limit of a random walk

Consider a *random walk* of particles in a one-dimensional domain. Let $\lambda_L$ and $\lambda_R$ represent hopping rates, such that the probability of a particle hopping distance $\Delta x$ to the right in time $\Delta t$ is
$$
\lambda_R \Delta t.
$$
Similarly, the probability of hopping a distance $\Delta x$ to the left is
$$
\lambda_L \Delta t.
$$


In @fig-randomwalksim results from a simulation of 400 random walkers is presented. Each particle is initialised at the origin and can move one step left or right with equal probability at every time step of the simulation. As time evolves the particle density (histogram) disperses. The normalised particle density appears to be well described by the solution of the diffusion equation (see solid lines, @eq-fund_sol).

```{python}
#| label: fig-randomwalksim
#| fig-cap: "Numerical implementation of random walk"
#| code-fold: True

# This code simuates random walk of a large number of particles and compares distribution in space with a solution of the diffusion equation 

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import random


# Define total num particles
N_particles=400

# Discretise domain
L=50
N_x=200

T=500
N_t=25000
dt=T/N_t
x=np.linspace(0,L,N_x)-L/2
t=np.linspace(dt,T,N_t)
# Model parameters
D=0.1

# Relate diffusion coefficient to probability of moving distance dx in time dt
move_probability=D*dt/dx**2

# Initialise particle positions at the origin
particle_positions=np.zeros((N_t,N_particles),dtype=float)

# loop over time
for i in range(1,N_t):
  # loop over particles
  for j in range(N_particles):

    # randomly sample uniform random number on U_[0,1]
    r=random.random()
    # move particle j right
    new_particle_position=particle_positions[i-1,j]
    if r<move_probability:
      new_particle_position+=dx
    # move particle j left  
    elif r<2*move_probability:
      new_particle_position-=dx
    particle_positions[i,j]=new_particle_position


# Compute exaxct solution of diffusion equation
[x_mesh,t_mesh]=np.meshgrid(x,t)
c_exact=1/np.sqrt(4*np.pi*D*t_mesh)*np.exp(-x_mesh**2/(4*D*t_mesh))

# Compare normalised histogram of particule positions with PDE solution
fig,ax=plt.subplots(2,2)
ax[0,0].hist(particle_positions[5,:],density=True)
ax[0,0].plot(x, c_exact[5,:], 'r')
ax[0,0].set_title('$t=$'+str(t[4]))

ax[0,1].hist(particle_positions[500,:],density=True)
ax[0,1].plot(x, c_exact[500,:], 'm')
ax[0,1].set_title('$t=$'+str(t[500]))

ax[1,0].hist(particle_positions[1000,:],density=True)
ax[1,0].plot(x, c_exact[1000,:], 'b')
ax[1,0].set_title('$t=$'+str(t[1000]))

ax[1,1].hist(particle_positions[1500,:],density=True)
ax[1,1].plot(x, c_exact[1500,:], 'k')
ax[1,1].set_title('$t=$'+str(t[1500]))

ax[0,0].set_xlim([-L/2,L/2])
ax[0,1].set_xlim([-L/2,L/2])
ax[1,0].set_xlim([-L/2,L/2])
ax[1,1].set_xlim([-L/2,L/2])

ax[0,0].set_xlabel('$x$')
ax[0,1].set_xlabel('$x$')
ax[1,0].set_xlabel('$x$')
ax[1,1].set_xlabel('$x$')

ax[0,0].set_ylabel('$c$')
ax[0,1].set_ylabel('$c$')
ax[1,0].set_ylabel('$c$')
ax[1,1].set_ylabel('$c$')

plt.tight_layout()
plt.show()
```

Let $c(x,t)$ represent the particle density at spatial location $x$ and time $t$.

A conservation equation for $c$ is given by
$$
c(x, t+ \Delta t) = c(x, t)  + \lambda_R \Delta t c(x- \Delta x, t) - \lambda_R \Delta t c(x, t) + \lambda_L \Delta t c(x+ \Delta x, t) - \lambda_L \Delta t c (x,t).
$$ 

Applying a Taylor series expansion about $(x,t)$ implies

$$
c(x,t) + \frac{ \partial c}{\partial t} \Delta t + \frac{1}{2}  \frac{ \partial^2 c}{\partial^2 t} (\Delta t )^2  + h.o.t. =
\lambda_R \Delta t \Big( c(x,t) - \frac{ \partial c}{\partial x} \Delta x + \frac 12  \frac{ \partial^2 c}{\partial^2 x} (\Delta x )^2  + h.o.t. \Big)\\ +
\lambda_L \Delta t \Big( c(x,t) + \frac{ \partial c}{\partial x} \Delta x + \frac 12  \frac{ \partial^2 c}{\partial x ^2} (\Delta x )^2  + h.o.t. \Big).
$$

Upon cancellation

$$
 \frac{ \partial c}{\partial t} \Delta t + \frac 12  \frac{ \partial^2 c}{\partial^2 t} (\Delta t )^2  + h.o.t. =
  \frac{ \partial c}{\partial x} \Delta x\Delta t (\lambda_L-\lambda_R) + \frac 12 \Delta t (\lambda_L+\lambda_R)  \frac{ \partial^2 c}{\partial x ^2} (\Delta x )^2  + h.o.t. 
$$ 

Dividing by $\Delta t$ gives

$$
 \frac{ \partial c}{\partial t}  + \frac 12  \frac{ \partial^2 c}{\partial^2 t} \Delta t   + h.o.t. =
   \frac{ \partial c}{\partial x} \Delta x (\lambda_L-\lambda_R) + \frac 12  (\lambda_L+\lambda_R)  \frac{ \partial^2 c}{\partial x^2} (\Delta x )^2  + h.o.t.  
$$

Considering the symmetric case where the probability of hopping left and right are equal, i.e.
$$
\lambda=\lambda_L=\lambda_R
$$
yields
$$
 \frac{ \partial c}{\partial t}  + \frac 12  \frac{ \partial^2 c}{\partial^2 t} \Delta t   + h.o.t. =
    \lambda \frac{ \partial^2 c}{\partial^2 x} (\Delta x )^2  + h.o.t.  
$$

Considering the limit $\Delta t \to 0$ and $\Delta x \to 0$  such  that

$$
D=\lambda (\Delta x )^2 
$$
 is finite yields the (one-dimensional) diffusion equation

$$
\frac{\partial c}{\partial t} = D \frac{\partial^2 c}{\partial x^2}.
$$

Note that $D$ has appropriate units (length$^2$/time) and that the probability of a particle hopping a distance $\Delta x$ in time $\Delta t$ is
$$
\lambda \Delta t = \frac{D\Delta t}{\Delta x^2}.
$$

This approach can be extended to consider other types of movement e.g. convection. For example, biasing hopping such that
$$
\lambda_L - \lambda_R = \varepsilon,
$$ 
yields a *reaction-diffusion-convection* equation (see tutorial).

Finally we note that there is a connection between diffusion and the normal distribution function.

**Recall** The normal distribution function in one-dimension with zero mean and variance $\sigma^2$ is given by 

$$
N(0, \sigma^2) \sim \frac 1 { \sqrt{ 2 \pi \sigma^2}} \exp \left( - \frac{x^2}{ 2 \sigma^2}\right).
$$ Examining the formula for the fundamental solution of the diffusion @eq-fund_sol in one-dimension, we see by inspection that the probability density function of the position of a particle performing a random walk in one-dimension starting at the origin is normally distributed with mean zero and variance $$
\sigma^2 = 2 D t.
$$

## Linear reaction-diffusion equations

Consider now the linear reaction term: $f(c) = \rho c$, so that @eq-general1Drd takes the form
$$
\frac{\partial c}{\partial t} = D \frac{\partial^2 c}{\partial x^2}   + \rho \, c, \quad x\in \mathbb R, \, \, t >0, 
$$ {#eq-lin_re_eq} 
where $\rho \in \mathbb R$ is a constant.

Once again we consider the initial condition to be concentrated at the origin: 
$$
c(0,x) = \delta_0(x).
$$ {#eq-lin_re_eq_ic}

### Exact solution

By considering a *separation of variables* approach, i.e. making the *ansatz* 
$$
c(x,t) = w(t) \tilde c(t,x),
$$ 
it can be shown (**Exercise**) that the explicit solution for the linear reaction-diffusion @eq-lin_re_eq with initial condition @eq-lin_re_eq_ic is given by

$$
c(t,x) = \frac1{\sqrt{4 \pi D t}} \exp \left(\rho t - \frac{x^2}{ 4Dt} \right).
$$

In @fig-diffusionlinearsource we compare numerical and exact solutions of @eq-lin_re_eq.

```{python}
#| label: fig-diffusionlinearsource
#| fig-cap: 
#|  - Numerical solution of linear reaction diffusion equation
#|  - Exact solution of linear reaction diffusion equation
#| code-fold: True
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

T=10
L=10

N_x=100
N_t=120

t=np.linspace(0,T,N_t)
x=np.linspace(0,L,N_x)-L/2

D=0.5
rho=1.0
epsilon=0.1

u_0=1/(epsilon*np.sqrt(np.pi))*np.exp(-x**2/epsilon**2)

dx=L/(N_x-1)
dt=T/(N_t-1)


def logisticPDErhs(u,t):
    N_x=len(u)
    f=np.zeros_like(u)
    for i in range(1,N_x-1):
      f[i]=D/dx**2*(u[i-1]-2*u[i]+u[i+1])  


    i=0
    f[i]=D/dx**2*(-u[i]+u[i+1])
    i=N_x-1

    f[i]=D/dx**2*(u[i-1]-u[i])

    reac=rho*u
    f=f+reac
    return f  

sol=odeint(logisticPDErhs,u_0,t)


[x_mesh,t_mesh]=np.meshgrid(x,t)

c_exact=1/np.sqrt(4*np.pi*D*t_mesh)*np.exp(rho*t_mesh-x_mesh**2/(4*D*t_mesh))

fig,ax=plt.subplots()
ax.plot(x, sol[1,:], 'r')
ax.plot(x, sol[4,:], 'b')
ax.plot(x, sol[8,:], 'm')
ax.plot(x, sol[12,:], 'k')
plt.legend(['t='+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])
ax.set_xlabel('$x$')
plt.grid()
plt.show()

fig,ax=plt.subplots()
ax.plot(x, c_exact[1,:], 'r')
ax.plot(x, c_exact[4,:], 'b')
ax.plot(x, c_exact[8,:], 'm')
ax.plot(x, c_exact[12,:], 'k')
plt.legend(['t='+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])
ax.set_xlabel('$x$')
plt.grid()
plt.show()
```

### Speed of a wave of invasion

Muskrats, which were introduced in 1905 in Bohemia, initially spread rapidly throughout Europe through a combination of random movement and proliferation (initially there were no predators and proliferation was rapid). A model for the initial spread can therefore be given by a two-dimensional diffusion equation combined with exponential growth and assuming that $M$ individuals were released at the origin (i.e. in Bohemia). Letting  $u({\mathbf{x}} , t)$,  represent the density of muskrats, the evolution equation is

$$
\frac{\partial u}{\partial t} = D \left(\frac{\partial^2 u}{\partial x_1^2} +  \frac{\partial^2 u}{\partial x_2^2}\right)  + \rho \, u, \quad {\mathbf{x}} = (x_1 , x_2) \in \mathbb R^2, \, \, t >0, 
$$ {#eq-muskrats_eq} 

with initial condition
$$
u({\mathbf{x}}, 0) = M \delta_0({\mathbf{x}}), \quad {\mathbf{x}} \in \mathbb R^2.
$$ {#eq-muskrats_eq_in}

It can be shown that the solution of @eq-muskrats_eq with initial conditions given by @eq-muskrats_eq_in is:

$$
u({\mathbf{x}}, t) = \frac M{4 \pi D t} \exp \left(\rho t - \frac{ |{\mathbf{x}} |^2}{ 4Dt} \right)\; = \frac M{4 \pi D t} \exp \left(\rho t - \frac{ (x_{1}^{2} + x_{2}^{2})}{4Dt} \right).
$$

Transforming to polar coordinates $x_1 = r \cos\varphi$, $x_2 = r \sin \varphi$ we obtain

$$
u({\mathbf{x}}, t) = \frac M{4 \pi D t} \exp \left(\rho t - \frac{ r^2}{ 4Dt} \right).
$$

From the properties of the fundamental solution, the wave of invasion extends all the way to infinity for any $t>0$. For practical purposes,  we have to define the front of the wave.

Consider that there is some detection threshold for the muskrats i.e. some predetermined small value of the density $u_1$, say, such that any changes in density for $u <u_1$ cannot be detected.

Because of the symmetry of the problem, then the leading edge of the invading wave front of muskrats is the circle of radius $r=r_1(t)$ where $u=u_1$, i.e. from the explicit solution of @eq-muskrats_eq

$$
u_1({\mathbf{x}}, t) = \frac M{4 \pi D t} \exp \left(\rho t - \frac{ r_1^2}{ 4Dt} \right).
$$

Rearranging and solving for $r_1$, using the fact that 
$$
\lim\limits_{t\to \infty} \dfrac {\ln t} t =0, 
$$ 

we obtain for large $t$ that 

$$
r_1(t) \approx 2 \sqrt{ \rho D} t.
$$

Hence, the speed of invasion of the leading edge of the muskrats is given by: 
$$
v = \frac{r_1(t)}{t} =  2 \sqrt{ \rho D}. 
$$