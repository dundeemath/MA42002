{
  "hash": "fe4dc7dfb1ea0cf85accd6122e8d7189",
  "result": {
    "markdown": "---\ntitle: \"Linear reaction diffusion equations\"\nformat: html\n---\n\nWe will now consider equations (and systems of such equations) of the general form:\n\n$$\n\\frac{\\partial c}{\\partial t} = D \\nabla^2 c + f(c), \\quad c \\equiv c( {\\mathbf{x}} , t ), \\;\\;  {\\mathbf{x}} \\in \\mathbb R^n, \\, \\, t >0.\n$$\n\nSuch an equation is known as a **reaction-diffusion equation**, being composed of a reaction term, $f(c)$, and a diffusion term, $D \\nabla^2 c$. Reaction-diffusion equations have many applications in biological systems e.g. travelling waves of invasion, pattern formation, spread of infectious diseases. For most of the remainder of the course we will consider such systems in one-space dimension i.e. $x \\in \\mathbb R$. \n\n\n\nConsider the one-dimensional reaction-diffusion equation with constant diffusion coefficient $D > 0$:\n$$\n\\frac{\\partial c}{\\partial t} = D \\frac{\\partial^2 c}{\\partial x^2}  + f(c), \\quad x\\in \\mathbb R, \\, \\, t >0.\n$$\n\n## One-dimensional diffusion equations\nIn order to provide some insight into the structure of solutions of reaction-diffusion equations, we make an initial simplifying assumption i.e. we assume $f(c)=0$, and obtain the linear diffusion equation (or heat equation): \n\n$$\n\\frac{\\partial c}{\\partial t} = D \\frac{\\partial^2 c}{\\partial x^2},   \\quad x\\in \\mathbb R, \\, \\, t >0.\n$$ {#eq-heat_eq}\nThis equation is used to model the evolution of the concentration of a chemical in a long thin tube, or the temperature of a long thin rod.  \n\nWe assume that the initial condition for our species $c$ is located in one point $x=0$, i.e. \n$$\nc(x_0 , 0) = \\delta_0(x)\\qquad x \\in \\mathbb R, \n$$ {#eq-heat_IC}\nwhere $\\delta_0$  is a **Dirac delta distribution** (Dirac measure) satisfying \n$$\n\\int_{-\\infty}^{+\\infty} \\delta_0(x) = 1 \\quad \\text{ and } \\quad \\int_{-\\infty}^{+\\infty} f(x) \\delta_0(x) = f(0) , \\text{ for continuous } f. \n$$\n\n\n### Fundamental solution\nIt can be shown that the sequence of functions $\\{ \\phi_\\varepsilon(x) \\}$ given by\n$$\n\\frac 1{\\varepsilon \\sqrt{\\pi} } e^{ - \\frac{x^2}{ \\varepsilon^2}}\n$$\nconverges to $\\delta_0(x)$ as $\\varepsilon \\to 0$ (in the sense of distributions or generalized functions). \n\nThen for the diffusion @eq-heat_eq with initial condition @eq-heat_IC, it can be shown that the explicit (analytic) solution is given by \n$$\nc(x, t) = \\frac1{\\sqrt{4 \\pi D t}} \\exp \\left( - \\frac{ x^2}{ 4Dt} \\right).\n$$ {#eq-fund_sol}\nThis is known as **the fundamental solution** of the diffusion equation in $\\mathbb R$. \n\nWe also have, for general initial condition $c(x, 0) = c_0(x)$ for $x\\in \\mathbb R$:\n$$\nc(x, t) = \\int_{-\\infty}^{+\\infty} \\frac{c_0(y)}{\\sqrt{4 \\pi D t}} \\exp \\left( - \\frac{ (x-y)^2}{ 4Dt} \\right) dy.\n$$\n\nThis result can be generalized to $\\mathbb R^n\\times (0,\\infty)$ where the fundamental solution has the form \n$$\nc(x,t) =  \\frac 1{(4 \\pi D t)^{n/2}} \\exp \\left( - \\frac{ (x_{1}^{2} + x_{2}^{2} + \\ldots + x_{n}^{2})}{ 4Dt} \\right).\n$$\n\n\n### Numerical solution\n\nIn @fig-diffusionpde we compute a numerical solution of the diffusion equation and compare it with the exact solution given by @eq-fund_sol.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\n\nT=10\nL=10\n\nN_x=100\nN_t=120\n\nt=np.linspace(0,T,N_t)\nx=np.linspace(0,L,N_x)-L/2\n\nD=1.5\nepsilon=0.1\n\nu_0=1/(epsilon*np.sqrt(np.pi))*np.exp(-x**2/epsilon**2)\n\ndx=L/(N_x-1)\ndt=T/(N_t-1)\n\n\ndef diffusionPDErhs(u,t):\n    N_x=len(u)\n    f=np.zeros_like(u)\n    for i in range(1,N_x-1):\n      f[i]=D/dx**2*(u[i-1]-2*u[i]+u[i+1])  \n\n\n    i=0\n    f[i]=D/dx**2*(-u[i]+u[i+1])\n    i=N_x-1\n\n    f[i]=D/dx**2*(u[i-1]-u[i])\n    return f  \n\nsol=odeint(diffusionPDErhs,u_0,t)\n\n\n[x_mesh,t_mesh]=np.meshgrid(x,t)\n\nc_exact=1/np.sqrt(4*np.pi*D*t_mesh)*np.exp(-x_mesh**2/(4*D*t_mesh))\n\nfig,ax=plt.subplots()\nax.plot(x, sol[1,:], 'r')\nax.plot(x, sol[4,:], 'b')\nax.plot(x, sol[8,:], 'm')\nax.plot(x, sol[12,:], 'k')\nplt.legend(['t'+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])\nplt.xlabel('$x$')\nplt.grid()\nplt.show()\n\nfig,ax=plt.subplots()\nax.plot(x, c_exact[1,:], 'r')\nax.plot(x, c_exact[4,:], 'b')\nax.plot(x, c_exact[8,:], 'm')\nax.plot(x, c_exact[12,:], 'k')\nplt.legend(['t'+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])\nplt.xlabel('$x$')\nplt.grid()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Numerical solution of diffusion equation.](linearreactiondiffusion_files/figure-html/fig-diffusionpde-output-1.png){#fig-diffusionpde width=571 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![Exact solution of diffusion equation.](linearreactiondiffusion_files/figure-html/fig-diffusionpde-output-2.png){#fig-diffusionpde width=571 height=429}\n:::\n:::\n\n\n### Key properties of the (linear) diffusion equation (heat equation)\n\n* The solution is infinitely smooth.\n* The solution $c(x,t)$ stays positive for all $t >0$ and $x \\in \\mathbb R$ if $c(x,0) >0$ for  $x \\in \\mathbb R$. \n* The solution ``propagates'' with infinite speed i.e. for any $t > 0$, the solution is everywhere in $\\mathbb R$.\n* If we change the initial data $c(x,0)$ (continuously) then the solution also changes (continuously). \n\n### Diffusive transit time \nWe now demonstrate the connection between time and space in diffusion equations. Consider a domain $V \\subset \\mathbb R^n \\;, n = 1,2,3.$, and particles that are entering $V$ and are being removed from $V$. Define\n\n\n$N$ - total number of particles in $V$\n\n$F$ - total number of particles entering $V$ per unit time\n\n$\\lambda$ - average removal rate of particles from $V$\n\n$\\tau = \\frac 1\\lambda$  - transit time or average time of residency in $V$\n\n\nRegardless of spatial variations, we can make the following general statement regarding the total number of particles in $V$, where we assume a constant entry rate $F$ and a constant removal rate $\\lambda$ at some sink in $V$:\n\n$$\n\\frac{dN}{dt} = \\text{entry rate} - \\text{removal rate} = F - \\lambda N.\n$$\n\nAt steady state ($dN/dt = 0$) we obtain \n$$\nMissing content here. Check notes!\n$$\n\n\nConsider particles of concentration $c(x,t)$ diffusing with constant diffusion $D$ in a one-dimensional domain $(0,L)$, with a constant concentration at one boundary and removed by a sink at the other boundary. At steady-state, the equation governing the concentration is given by:\n\n$$\nD \\frac{ d^2 c}{dx^2} = 0  \\quad \\text{ in } (0,L), \\quad c(0) = C_0, \\, c(L) = 0 .\n$$\n\nThe solution (**Exercise**) is:\n$$\nc(x) = C_0 \\left( 1- \\frac x L\\right).\n$$\nThen the number of particles entering at $x=0$ due to diffusive flux (Fickian diffusion) is:\n$$\nJ = - D \\frac{ dc}{ dx} = D \\frac{ C_0} L,  \n$$\n\nand the total number of particles is given by:\n$$\nN = \\int_0^L c(x) \\, dx = \\frac 12 L C_0 .\n$$\nIf we assume a cross-section of unit area at $x=0$, then \n$$\nF = \\text{flux}\\times\\text{area} = J\\times 1 = D \\frac{ C_0} L\n$$\nand \n$$\n\\tau =  \\frac N F = \\frac { C_0 L}{2} \\frac L{ DC_0} = \\frac 12 \\frac{L^2}{D}.\n$$\nThus the average time it takes a particle to diffuse a distance, $L$, is \n$$\n\\tau = \\dfrac{L^2}{2D}\n$$\nor viewed another way, the average distance through which diffusion transports a particle in a time $\\tau$ is $L= \\sqrt{ 2D\\tau}$.\n\n### Diffusion as the limit of a random walk \n\nConsider the **random walk** of particles in a one-dimensional domain. Suppose that the particles move randomly a distance, $\\Delta x$, every time step, $\\Delta t$. Assume that the particles move left with probability $\\lambda_L$ and right with probability $\\lambda_R$.\n\nIn Figure @fig-randomwalksim a simulation of 400 random walking particles is presented. Each particle is initialised at the origin and can move one step left or right with equal probability at every time step of the simulation. As time evolves the particle density (histogram) disperses. The normalised particle density appears to be well described by the solution of the diffusion equation (solid lines, @eq-fund_sol).\n\n::: {.cell execution_count=2}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\nimport random\n\nN_particles=400\n\nL=50\nN_x=200\n\nT=500\nN_t=25000\nD=0.1\n\ndt=T/N_t\n\nmove_probability=D*dt/dx**2\n\nx=np.linspace(0,L,N_x)-L/2\nt=np.linspace(dt,T,N_t)\n\nparticle_positions=np.zeros((N_t,N_particles),dtype=float)\n\n# loop over time\nfor i in range(1,N_t):\n  # loop over particles\n  for j in range(N_particles):\n\n    r=random.random()\n    # move particle j right\n    new_particle_position=particle_positions[i-1,j]\n    if r<move_probability:\n      new_particle_position+=dx\n    # move particle j left  \n    elif r<2*move_probability:\n      new_particle_position-=dx\n    particle_positions[i,j]=new_particle_position\n\n\n[x_mesh,t_mesh]=np.meshgrid(x,t)\nc_exact=1/np.sqrt(4*np.pi*D*t_mesh)*np.exp(-x_mesh**2/(4*D*t_mesh))\n\n\nfig,ax=plt.subplots(2,2)\nax[0,0].hist(particle_positions[5,:],density=True)\nax[0,0].plot(x, c_exact[5,:], 'r')\nax[0,0].set_title('$t=$'+str(t[5]))\n\nax[0,1].hist(particle_positions[500,:],density=True)\nax[0,1].plot(x, c_exact[500,:], 'm')\nax[0,1].set_title('$t=$'+str(t[500]))\n\nax[1,0].hist(particle_positions[1000,:],density=True)\nax[1,0].plot(x, c_exact[1000,:], 'b')\nax[1,0].set_title('$t=$'+str(t[1000]))\n\nax[1,1].hist(particle_positions[1500,:],density=True)\nax[1,1].plot(x, c_exact[1500,:], 'k')\nax[1,1].set_title('$t=$'+str(t[1500]))\n\nax[0,0].set_xlim([-L/2,L/2])\nax[0,1].set_xlim([-L/2,L/2])\nax[1,0].set_xlim([-L/2,L/2])\nax[1,1].set_xlim([-L/2,L/2])\nplt.xlabel('$x$')\nplt.grid()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Numerical implementation of random walk](linearreactiondiffusion_files/figure-html/fig-randomwalksim-output-1.png){#fig-randomwalksim width=579 height=449}\n:::\n:::\n\n\nConcider the concentration of particles $c(x,t)$ at spatial location $x$ and time $t$, (or more precisely, the probability density function of the position of a particle performing a random walk) we have: \n$$\nc(x, t+ \\Delta t) = c(x, t)  + \\lambda_R c(x- \\Delta x, t) - \\lambda_R c(x, t) + \\lambda_L c(x+ \\Delta x, t) - \\lambda_L c (x,t).\n$$\nIf we assume that $\\lambda_R+ \\lambda_L =1$ then \n$$\nc(x, t+ \\Delta t) =  \\lambda_R c(x- \\Delta x, t) + \\lambda_L c(x+ \\Delta x, t).\n$$\nApplying a Taylor series expansion about $(x,t)$ implies\n\n$$\nc(t,x) + \\frac{ \\partial c}{\\partial t} \\Delta t + \\frac 12  \\frac{ \\partial^2 c}{\\partial^2 t} (\\Delta t )^2  + h.o.t. =\n\\lambda_R \\Big( c(t,x) - \\frac{ \\partial c}{\\partial x} \\Delta x + \\frac 12  \\frac{ \\partial^2 c}{\\partial^2 x} (\\Delta x )^2  + h.o.t. \\Big)\\\\ +\n\\lambda_L \\Big( c(t,x) + \\frac{ \\partial c}{\\partial x} \\Delta x + \\frac 12  \\frac{ \\partial^2 c}{\\partial^2 x} (\\Delta x )^2  + h.o.t. \\Big).\n$$\n\nUsing $\\lambda_R+ \\lambda_L =1$ and assuming $\\lambda_L = \\lambda_R = \\frac 12$ we obtain \n\n$$\n \\frac{ \\partial c}{\\partial t} \\Delta t + \\frac 12  \\frac{ \\partial^2 c}{\\partial^2 t} (\\Delta t )^2  + h.o.t. =\n \\frac 12  \\frac{ \\partial^2 c}{\\partial^2 x} (\\Delta x )^2  + h.o.t. \n$$\nDividing by $\\Delta t$ gives \n\n$$\n \\frac{ \\partial c}{\\partial t}  + \\frac 12  \\frac{ \\partial^2 c}{\\partial^2 t} \\Delta t   + h.o.t. =\n   \\frac{ \\partial^2 c}{\\partial^2 x} \\frac{(\\Delta x )^2 }{2\\Delta t} + h.o.t. \n$$\n\nConsidering the limit $\\Delta t \\to 0$ and $\\Delta x \\to 0$ in such way that \n\n$$\n \\frac{(\\Delta x )^2 }{2\\Delta t} \\to D,\n$$\n\nyields the (one-dimensional) diffusion equation \n\n$$\n\\frac{\\partial c}{\\partial t} = D \\frac{\\partial^2 c}{\\partial x^2}.\n$$\n\nThis approach can be extended to consider other types of movement e.g. convection. For example, if we assume that  \n$$\n\\lambda_R+ \\lambda_L =1,\n$$ \nand \n$$\n\\lambda_L - \\lambda_R = \\varepsilon,\n$$\n the motion of the particles is biased and we may derive an appropriate **reaction-diffusion-convection** equation (see tutorial). \n\n\nFinally we note that there is a connection between diffusion and the normal distribution function. \n\n**Recall** The normal distribution function in one-dimension with zero mean and variance $\\sigma^2$ is given by @#eq-fund_sol.\n\n$$\nN(0, \\sigma^2) \\sim \\frac 1 { \\sqrt{ 2 \\pi \\sigma^2}} \\exp \\left( - \\frac{x^2}{ 2 \\sigma^2}\\right).\n$$\nExamining the formula for the fundamental solution of the diffusion @eq-fund_sol in one-dimension, we see by inspection that the probability density function of the position of a particle performing a random walk in one-dimension starting at the origin is normally distributed with mean zero and variance \n$$\n\\sigma^2 = 2 D t.\n$$ \n\n## Linear reaction-diffusion equations\n\nConsider now the linear reaction term: $f(c) = \\rho c$, so that our reaction-diffusion equation is:\n$$\n\\frac{\\partial c}{\\partial t} = D \\frac{\\partial^2 c}{\\partial x^2}   + \\rho \\, c, \\quad x\\in \\mathbb R, \\, \\, t >0, \n$$ {#eq-lin_re_eq} \nwhere $\\rho \\in \\mathbb R$ is a constant. \n\nOnce again we consider the initial condition to be  concentrated at the origin:\n$$\nc(0,x) = \\delta_0(x).\n$$ {#eq-lin_re_eq_ic}\n\n### Exact solution\nBy considering a *separation of variables* approach, i.e. making the **ansatz** \n$$\nc(x,t) = w(t) \\tilde c(t,x),\n$$ \nit can be shown (**Exercise**) that the explicit solution for the linear reaction-diffusion @eq-lin_re_eq with initial condition @eq-lin_re_eq_ic is given by\n\n$$\nc(t,x) = \\frac1{\\sqrt{4 \\pi D t}} \\exp \\left(\\rho t - \\frac{x^2}{ 4Dt} \\right).\n$$\n\n::: {.cell execution_count=3}\n``` {.python .cell-code code-fold=\"true\"}\nimport numpy as np\nfrom scipy.integrate import odeint\nimport matplotlib.pyplot as plt\n\nT=10\nL=10\n\nN_x=100\nN_t=120\n\nt=np.linspace(0,T,N_t)\nx=np.linspace(0,L,N_x)-L/2\n\nD=0.5\nrho=1.0\nepsilon=0.1\n\nu_0=1/(epsilon*np.sqrt(np.pi))*np.exp(-x**2/epsilon**2)\n\ndx=L/(N_x-1)\ndt=T/(N_t-1)\n\n\ndef logisticPDErhs(u,t):\n    N_x=len(u)\n    f=np.zeros_like(u)\n    for i in range(1,N_x-1):\n      f[i]=D/dx**2*(u[i-1]-2*u[i]+u[i+1])  \n\n\n    i=0\n    f[i]=D/dx**2*(-u[i]+u[i+1])\n    i=N_x-1\n\n    f[i]=D/dx**2*(u[i-1]-u[i])\n\n    reac=rho*u\n    f=f+reac\n    return f  \n\nsol=odeint(logisticPDErhs,u_0,t)\n\n\n[x_mesh,t_mesh]=np.meshgrid(x,t)\n\nc_exact=1/np.sqrt(4*np.pi*D*t_mesh)*np.exp(rho*t_mesh-x_mesh**2/(4*D*t_mesh))\n\nfig,ax=plt.subplots()\nax.plot(x, sol[1,:], 'r')\nax.plot(x, sol[4,:], 'b')\nax.plot(x, sol[8,:], 'm')\nax.plot(x, sol[12,:], 'k')\nplt.legend(['t'+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])\nplt.xlabel('$x$')\nplt.grid()\nplt.show()\n\nfig,ax=plt.subplots()\nax.plot(x, c_exact[1,:], 'r')\nax.plot(x, c_exact[4,:], 'b')\nax.plot(x, c_exact[8,:], 'm')\nax.plot(x, c_exact[12,:], 'k')\nplt.legend(['t'+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])\nplt.xlabel('$x$')\nplt.grid()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![Numerical solution of linear reaction diffusion equation](linearreactiondiffusion_files/figure-html/fig-diffusionlinearsource-output-1.png){#fig-diffusionlinearsource width=571 height=429}\n:::\n\n::: {.cell-output .cell-output-display}\n![Exact solution of linear reaction diffusion equation](linearreactiondiffusion_files/figure-html/fig-diffusionlinearsource-output-2.png){#fig-diffusionlinearsource width=571 height=429}\n:::\n:::\n\n\n### Speed of a wave of invasion\n\nMuskrats which were introduced in 1905 in Bohemia initially spread rapidly throughout Europe through a combination of random movement and proliferation (initially there were no predators and proliferation was rapid). A model for the initial spread can therefore be given by a two-dimensional diffusion equation combined with exponential growth and assuming that $M$ individuals were released at the origin (i.e. in Bohemia). Considering the density of muskrats $u({\\mathbf{x}} , t)$, the equation is\n\n$$\n\\frac{\\partial u}{\\partial t} = D \\left(\\frac{\\partial^2 u}{\\partial x_1^2} +  \\frac{\\partial^2 u}{\\partial x_2^2}\\right)  + \\rho \\, u, \\quad {\\mathbf{x}} = (x_1 , x_2) \\in \\mathbb R^2, \\, \\, t >0, \n$${#eq-muskrats_eq}\n$$\nu({\\mathbf{x}}, 0) = M \\delta_0({\\mathbf{x}}), \\quad {\\mathbf{x}} \\in \\mathbb R^2.\n$$ {#eq-muskrats_eq_in}\n\nThe solution of @eq-muskrats_eq with initial conditions @eq-muskrats_eq_in is equal to:\n\n$$\nu({\\mathbf{x}}, t) = \\frac M{4 \\pi D t} \\exp \\left(\\rho t - \\frac{ |{\\mathbf{x}} |^2}{ 4Dt} \\right)\\; = \\frac M{4 \\pi D t} \\exp \\left(\\rho t - \\frac{ (x_{1}^{2} + x_{2}^{2})}{4Dt} \\right).\n$$\n\nTransforming to polar coordinates $x_1 = r \\cos\\varphi$, $x_2 = r \\sin \\varphi$ we obtain \n\n$$\nu({\\mathbf{x}}, t) = \\frac M{4 \\pi D t} \\exp \\left(\\rho t - \\frac{ r^2}{ 4Dt} \\right).\n$$\n\nFrom the properties of the fundamental solution, the wave of invasion extends all the way to infinity if $t>0$. Thus, for practical purposes, somehow we have to define the front of the wave. \n\nConsider that there is some detection threshold for the muskrats i.e. some predetermined small value of the density  $u_1$, say, such that any changes in density for $u <u_1$ cannot be detected.\n\nBecause of the symmetry of the problem, then the leading edge of the invading wave front of muskrats is the circle of radius $r=r_1(t)$  where $u=u_1$, i.e. from the explicit solution  of @eq-muskrats_eq, \n\n$$\nu_1({\\mathbf{x}}, t) = \\frac M{4 \\pi D t} \\exp \\left(\\rho t - \\frac{ r_1^2}{ 4Dt} \\right).\n$$\n\nRearranging and solving for $r_1$, using the fact that \n$$\n\\lim\\limits_{t\\to \\infty} \\dfrac {\\ln t} t =0, \n$$\nwe obtain for large $t$ that \n$$\nr_1(t) \\approx 2 \\sqrt{ \\rho D} t.\n$$\n\nHence, the speed of invasion of the leading edge of the muskrats is given by:\n$$\nv = \\frac{r_1(t)}{t} =  2 \\sqrt{ \\rho D}. \n$$\n\n",
    "supporting": [
      "linearreactiondiffusion_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}