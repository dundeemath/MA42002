---
title: "Lecture slides"
author: "Philip Murray"
format: beamer
---

## Lecture 1 

* Introduction to MA42002
* Conservation equations
* Examples of spatially homogeneous models



## Conservation equations
$$
\begin{aligned}
\begin{pmatrix}
\text{rate of change}\\
\text{ in the population density} 
\end{pmatrix}
&= \begin{pmatrix}
\text{spatial movement}
\end{pmatrix}
\\
 &+\begin{pmatrix}
 \text{birth, growth, death},\\
 \text{production or degradation}\\
  \text{due to chemical reactions} 
\end{pmatrix}
\end{aligned}
$$

\vspace{5cm}


#  Spatially homogeneous models (MA32009 revision)

## Example problem - bacteria in a dish
$$\begin{aligned}
N(t+\Delta t) &=  \quad N(t)   + \quad  K N(t) \Delta t.
\end{aligned} 
$$

\vspace{5cm}

## A model for cell growth under nutrient depletion

$$
\begin{aligned}
\frac{dN}{dt} &= K(c) N = \kappa cN,  \\
 \frac{ dc}{dt} &= - \alpha \frac{dN}{dt} = - \alpha   \kappa c N,  
 \end{aligned}
$${#eq-c_1}

\vspace{5cm}




## Leading to the logistic growth equation
The last equation can be rewritten as
$$  
\frac{dN}{dt} = \rho  N \,  (1 - \frac N B)  \qquad \quad N(0)= N_0, 
$$ {#eq-n_5}

## Can also consider other biological processes




## Exercise

Consider a well mixed bio reactor. 

A biologist cultures an initial cell population of size $N_0$ in the bioreactor for 72 h.

Cells undergo division with a period of 14 h.

Each cell produces a non-degradable waste product, $W$, at rate $k_1$.

When total waste levels exceed a threshold, $W^*$, cell division stops. Otherwise the cell population grows exponentially.

How many cells are there at the end of the experiment?


## Model development


::: {.callout-note}
## Model checklist
1. Variables (dependent, indepedent ?)
2. Schematic diagram - what processes are being modelled?
3. Governing equations?
4. Define model parameters?
5. Initial conditions?
:::

## Exercise solution

## Recap

* Is course layout clear
* Introduction to conservation equation
* Deriving spatially homogeneous models



## Lecture 2 

* Continue example
* Introduce SIR model
* Introduce an activator inhibitor model
* Derive a conservation equation

## Exercise

Consider a well mixed bio reactor. 

A biologist cultures an initial cell population of size $N_0$ in the bioreactor for 72 h.

Cells undergo division with a period of 14 h.

Each cell produces a non-degradable waste product, $W$, at rate $k_1$.

When total waste levels exceed a threshold, $W^*$, cell division stops. Otherwise the cell population grows exponentially.

How many cells are there at the end of the experiment?

##  The SIR model (used in Chapter 7)

Consider the SIR model equations:
$$
\begin{aligned}
\frac{d S}{ dt} &= -rIS, \\
\frac{d I}{ dt} &= rIS - aI, \\
\frac{d R}{ dt} &= aI.
\end{aligned}
$$

What are the variables?
What are the parameters?

Identify an expression for the reproduction number, $R_0$.

Hence explain why the condition $R_0<1$ is necessary to avoid an epidemic?

## SIR model Calculations
$$
\begin{aligned}
\frac{d S}{ dt} &= -rIS, \\
\frac{d I}{ dt} &= rIS - aI, \\
\frac{d R}{ dt} &= aI.
\end{aligned}
$$

\vspace{6cm}

##  An activator inhibitor model (used in Chapter 6)


Assume that species A is produced at constant rate $k_1$ and degrades at rate $k_2$. 

Assume that B is produced at a constant rate, $k_4$.

Consider the reaction schematic
$$
2A+B \rightarrow 3A,
$$
with reaction rate $k_3$.

Write down governing ODEs.

\vspace{3cm}


## Activator-inhibitor model 

Consider the ODEs
$$
\begin{aligned}
\frac{d a}{ dt} &= k_1 - k_2 a + k_3 a^2 b,  \\
\frac{d b}{ dt} &= k_4 - k_3 a^2 b,
\end{aligned}
$$

Identify the steady state of the ODEs.
How would you compute linear stability of the steady state?

\vspace{5cm}

## Recap

* Introduced SIR and activator-inhibitor models
* Computed steady states and stability analysis



## Lecture 3 Spatiotemporal models

* Derive conservation PDEs
* Consider different models of fluxes

## Spatiotemporal models - derivation
Consider a spatial domain $V$. A conservation equation can be written either in terms of the mass or number of particles of a species as follows:

$$
\begin{aligned}
\begin{pmatrix}
\text{rate of change of}\\
\text{number of particles} \\
\text{per unit time } 
\end{pmatrix}
&= \begin{pmatrix}
\text{rate of entry of}\\
\text{particles into $V$}\\
\text{per unit time}
\end{pmatrix}
- \begin{pmatrix}
\text{rate of exit of }\\
\text{particles from $V$}\\
\text{per unit time}
\end{pmatrix} \\
& + 
 \begin{pmatrix}
 \text{rate of degradation}\\
 \text{or creation of particles }\\
  \text{in $V$ per unit time} 
\end{pmatrix}
\end{aligned}
$$


## Deriving a conservation equation in 1D
$$
\begin{aligned}
\frac{\partial}{\partial t} \int_x^{x+\Delta x} c(\tilde x, t) A d\tilde x &= J(x,t) \, A  - J(x+\Delta x,t) \, A \\
 &+\int_x^{x + \Delta x}  f(\tilde x, t, c(\tilde x, t))\,  A \, d \tilde x.
\end{aligned}
$$ {#eq-concerv_01}

\vspace{7cm}


## A conservation PDE in 1D

$$
\frac{\partial}{\partial t} c(x,t)  = - \frac  {\partial} { \partial x} J(x,t) + f(x,t ,c(x,t)).
$$ {#eq-concerv_3}

\vspace{5 cm}

## Generalising to $R^n$
$$
\frac{\partial}{\partial t} \int_V c(x,t) \, dx = - \int_{S} J(x,t) \cdot {\mathbf{n}} \, d\sigma + \int_V f(x,t ,c)dx.
$$
\vspace{5 cm}



##  Fluxes - Fickian diffusion
  $$
    {\mathbf{J}} = - D\nabla c,
  $$ {#eq-diffusion}

  \vspace{7cm}

##  Fluxes - Nonlinear diffusion
$$
  D = D(c) , \qquad \text{ e.g. }\,   D(c)= D_0 c^m, \quad D_0 >0, 
$$

Hence
$$
J=-D(c)\nabla c
$$ 

\vspace{7cm}

## Fluxes - Convection/advection
$$
  {\mathbf{J}} = \mathbf{v}c,
$$ {#eq-diffusion}

\vspace{7cm}

##  Fluxes - Taxis
$$
    {\mathbf{J}} = \chi(a) c \nabla a,  
$$

## Domain of definition of the problem




## Boundary conditions

* Dirichlet
* Neumann
* Robin 


\vspace{7cm}

## Lecture 4

*  Boundary and initial conditions
*  Nondimensionalisation
*  Model formulation
*  a linear reaction diffusion model
*  Diffusion



## Initial conditions




\vspace{7cm}

## Formulating a model




\vspace{7cm}




## Linear reaction diffusion equation

$$
\frac{\partial c}{\partial t} = D \nabla^2 c + f(c), \quad c \equiv c( {\mathbf{x}} , t ), \;\;  {\mathbf{x}} \in \mathbb R^n, \, \, t >0.
$$
so in 1D Cartesian coordinates
$$
\frac{\partial c}{\partial t} = D \frac{\partial^2 c}{\partial x^2}  + f(c), \quad x\in \mathbb R, \, \, t >0.
$$ 

##  1D diffusion equation with delta IC


$$
\frac{\partial c}{\partial t} = D \frac{\partial^2 c}{\partial x^2},   \quad x\in \mathbb R, \, \, t >0.
$$ {#eq-heat_eq} 

$$
c(x_0 , 0) = \delta_0(x)\qquad x \in \mathbb R, 
$$ {#eq-heat_IC} where $\delta_0$ is a *Dirac delta distribution* (Dirac measure) satisfying $$
\int_{-\infty}^{+\infty} \delta_0(x) = 1 \quad \text{ and } \quad \int_{-\infty}^{+\infty} f(x) \delta_0(x) = f(0) , \text{ for continuous } f. 
$$

## Numerical solution

```{python .content-visible unless-format="pdf"}
#| label: fig-diffusionpde
#| fig-cap: 
#|  - "Numerical solution of diffusion equation."
#|  - "Exact solution of diffusion equation."
#| code-fold: True

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt


# define domain size
T=10
L=10

# discretise domain
N_x=100
N_t=120
t=np.linspace(0,T,N_t)
x=np.linspace(0,L,N_x)-L/2
dx=L/(N_x-1)
dt=T/(N_t-1)

# Define model parameters
D=1.5
epsilon=0.1


# Define initial data
u_0=1/(epsilon*np.sqrt(np.pi))*np.exp(-x**2/epsilon**2)

# define rhs of PDE
def diffusionPDErhs(u,t):
    N_x=len(u)
    f=np.zeros_like(u)

    # Interior points on the domain
    for i in range(1,N_x-1):
      f[i]=D/dx**2*(u[i-1]-2*u[i]+u[i+1])  
    
    # Boundary at x=0 - flux is zero
    i=0
    f[i]=D/dx**2*(-u[i]+u[i+1])
    
    # Boundary at x=L - flux is zero
    i=N_x-1
    f[i]=D/dx**2*(u[i-1]-u[i])
    return f  

# Use method of lines to solve PDE
sol=odeint(diffusionPDErhs,u_0,t)

# Generate x and t mesh to compute exact solution
[x_mesh,t_mesh]=np.meshgrid(x,t)

c_exact=1/np.sqrt(4*np.pi*D*t_mesh)*np.exp(-x_mesh**2/(4*D*t_mesh))

# Plot solutions and compare
fig,ax=plt.subplots()
ax.plot(x, sol[1,:], 'r')
ax.plot(x, sol[4,:], 'b')
ax.plot(x, sol[8,:], 'm')
ax.plot(x, sol[12,:], 'k')
plt.legend(['t='+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])
plt.xlabel('$x$')
plt.ylabel('$c$')

plt.grid()
plt.show()

fig,ax=plt.subplots()
ax.plot(x, c_exact[1,:], 'r')
ax.plot(x, c_exact[4,:], 'b')
ax.plot(x, c_exact[8,:], 'm')
ax.plot(x, c_exact[12,:], 'k')
plt.legend(['t='+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])
plt.xlabel('$x$')
plt.ylabel('$c$')
plt.grid()
plt.show()
```



## An exact solution computed using a *similarity* variable

Consider the diffusion @eq-heat_eq with initial condition @eq-heat_IC. 

Introduce the similarity variable
$$
\eta=\frac{x}{\sqrt{Dt}}
$$
and look for solution of the form
$$
c(x,t)=\frac{1}{\sqrt{Dt}}F(\eta).
$$

Hence it can be shown that the explicit (analytic) solution is given by 
$$
c(x, t) = \frac1{\sqrt{4 \pi D t}} \exp \left( - \frac{ x^2}{ 4Dt} \right).
$$ {#eq-fund_sol}

## The 1D diffusion equation for arbitrary initial condition

For a general initial condition $c(x, 0) = c_0(x)$ for $x\in \mathbb R$: 
$$
c(x, t) = \int_{-\infty}^{+\infty} \frac{c_0(y)}{\sqrt{4 \pi D t}} \exp \left( - \frac{ (x-y)^2}{ 4Dt} \right) dy.
$$

## Key properties of the (linear) diffusion equation (heat equation)

-   The solution is infinitely smooth.
-   The solution $c(x,t)$ stays positive for all $t >0$ and $x \in \mathbb R$ if $c(x,0) >0$ for $x \in \mathbb R$.
-   The solution \`\`propagates'' with infinite speed i.e. for any $t > 0$, the solution is everywhere in $\mathbb R$.
-   If we change the initial data $c(x,0)$ (continuously) then the solution also changes (continuously).

## Diffusive transit time

$$
D \frac{ d^2 c}{dx^2} = 0  \quad \text{ in } (0,L), \quad c(0) = C_0, \, c(L) = 0 .
$$


<!--

\vspace{5cm}

## Diffusion as a description of random walk

Suppose that the probability of a particle hopping distance $\Delta x$ to the right in time $\Delta t$ is 
$$
\lambda_R \Delta t.
$$ 
Similarly, the probability of hopping a distance $\Delta x$ to the left is $$
\lambda_L \Delta t.
$$

## Numerical simulation

```{python}
#| label: fig-randomwalksim
#| fig-cap: "Numerical implementation of random walk"
#| code-fold: True

# This code simulates random walk of a large number of particles and compares distribution in space with a solution of the diffusion equation 

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import random


# Define total num particles
N_particles=400

# Discretise domain
L=50
N_x=200

T=500
N_t=25000
dt=T/N_t
x=np.linspace(0,L,N_x)-L/2
t=np.linspace(dt,T,N_t)
# Model parameters
D=0.1

# Relate diffusion coefficient to probability of moving distance dx in time dt
move_probability=D*dt/dx**2

# Initialise particle positions at the origin
particle_positions=np.zeros((N_t,N_particles),dtype=float)

# loop over time
for i in range(1,N_t):
  # loop over particles
  for j in range(N_particles):

    # randomly sample uniform random number on U_[0,1]
    r=random.random()
    # move particle j right
    new_particle_position=particle_positions[i-1,j]
    if r<move_probability:
      new_particle_position+=dx
    # move particle j left  
    elif r<2*move_probability:
      new_particle_position-=dx
    particle_positions[i,j]=new_particle_position


# Compute exaxct solution of diffusion equation
[x_mesh,t_mesh]=np.meshgrid(x,t)
c_exact=1/np.sqrt(4*np.pi*D*t_mesh)*np.exp(-x_mesh**2/(4*D*t_mesh))

# Compare normalised histogram of particule positions with PDE solution
fig,ax=plt.subplots(2,2)
ax[0,0].hist(particle_positions[5,:],density=True)
ax[0,0].plot(x, c_exact[5,:], 'r')
ax[0,0].set_title('$t=$'+str(t[4]))

ax[0,1].hist(particle_positions[500,:],density=True)
ax[0,1].plot(x, c_exact[500,:], 'm')
ax[0,1].set_title('$t=$'+str(t[500]))

ax[1,0].hist(particle_positions[1000,:],density=True)
ax[1,0].plot(x, c_exact[1000,:], 'b')
ax[1,0].set_title('$t=$'+str(t[1000]))

ax[1,1].hist(particle_positions[1500,:],density=True)
ax[1,1].plot(x, c_exact[1500,:], 'k')
ax[1,1].set_title('$t=$'+str(t[1500]))

ax[0,0].set_xlim([-L/2,L/2])
ax[0,1].set_xlim([-L/2,L/2])
ax[1,0].set_xlim([-L/2,L/2])
ax[1,1].set_xlim([-L/2,L/2])

ax[0,0].set_xlabel('$x$')
ax[0,1].set_xlabel('$x$')
ax[1,0].set_xlabel('$x$')
ax[1,1].set_xlabel('$x$')

ax[0,0].set_ylabel('$c$')
ax[0,1].set_ylabel('$c$')
ax[1,0].set_ylabel('$c$')
ax[1,1].set_ylabel('$c$')

plt.tight_layout()
plt.show()
```

## Derivation

Let $c(x,t)$ represent the particle density at spatial location $x$ and time $t$.

A conservation equation for $c$ is given by 
$$
\begin{aligned}
c(x, t+ \Delta t) &= c(x, t)  + \lambda_R \Delta t c(x- \Delta x, t) - \lambda_R \Delta t c(x, t) + \\
&\lambda_L \Delta t c(x+ \Delta x, t) - \lambda_L \Delta t c (x,t).
\end{aligned}
$$

## Lecture 6

* Random walk as a model for the diffusion equation
* Linear reaction diffusion


## Recap from last week
A conservation equation for $c$ is given by 
$$
\begin{aligned}
c(x, t+ \Delta t) &= c(x, t)  + \lambda_R \Delta t c(x- \Delta x, t) - \lambda_R \Delta t c(x, t) + \\
&\lambda_L \Delta t c(x+ \Delta x, t) - \lambda_L \Delta t c (x,t).
\end{aligned}
$$

\vspace{6cm}


##


## Linear reaction term
$$
\frac{\partial c}{\partial t} = D \frac{\partial^2 c}{\partial x^2}   + \rho \, c, \quad x\in \mathbb R, \, \, t >0, 
$$ {#eq-lin_re_eq} where $\rho \in \mathbb R$ is a constant. 
with initial condition 
$$
u(x, 0) = M \delta_0(x), \quad x \in \mathbb R.
$$ {#eq-muskrats_eq_in}

\vspace{6cm}

## Numerical solution
```{python}
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

T=10
L=10

N_x=100
N_t=120

t=np.linspace(0,T,N_t)
x=np.linspace(0,L,N_x)-L/2

D=0.5
rho=1.0
epsilon=0.1

u_0=1/(epsilon*np.sqrt(np.pi))*np.exp(-x**2/epsilon**2)

dx=L/(N_x-1)
dt=T/(N_t-1)


def logisticPDErhs(u,t):
    N_x=len(u)
    f=np.zeros_like(u)
    for i in range(1,N_x-1):
      f[i]=D/dx**2*(u[i-1]-2*u[i]+u[i+1])  


    i=0
    f[i]=D/dx**2*(-u[i]+u[i+1])
    i=N_x-1

    f[i]=D/dx**2*(u[i-1]-u[i])

    reac=rho*u
    f=f+reac
    return f  

sol=odeint(logisticPDErhs,u_0,t)


[x_mesh,t_mesh]=np.meshgrid(x,t)

c_exact=1/np.sqrt(4*np.pi*D*t_mesh)*np.exp(rho*t_mesh-x_mesh**2/(4*D*t_mesh))

fig,ax=plt.subplots()
ax.plot(x, sol[1,:], 'r')
ax.plot(x, sol[4,:], 'b')
ax.plot(x, sol[8,:], 'm')
ax.plot(x, sol[12,:], 'k')
plt.legend(['t='+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])
ax.set_xlabel('$x$')

plt.grid()
plt.show()
```

## Muskrat invasion dynamics 

$$
\frac{\partial u}{\partial t} = D \left(\frac{\partial^2 u}{\partial x_1^2} +  \frac{\partial^2 u}{\partial x_2^2}\right)  + \rho \, u, \quad {\mathbf{x}} = (x_1 , x_2) \in \mathbb R^2, \, \, t >0, 
$$ 

with initial condition $$
u({\mathbf{x}}, 0) = M \delta_0({\mathbf{x}}), \quad {\mathbf{x}} \in \mathbb R^2.
$$ {#eq-muskrats_eq_in}

$$
u_1({\mathbf{x}}, t) = \frac M{4 \pi D t} \exp \left(\rho t - \frac{ r_1^2}{ 4Dt} \right).
$$



## Lecture 7 
## Travelling waves

::: callout-note
## Travelling wave
A travelling wave is a solution of a PDE that has a constant profile (shape) and a constant propagation speed.
:::


## Fisher's equation
$$
\frac{\partial u}{\partial t} = D\frac{\partial^2 u}{\partial x^2} +   \rho u(1-\frac{u}{K}), \qquad x\in \mathbb R, \, \, t >0 
$$ with initial condition $$
u(x,0) = u_0(x).
$$ {#eq-fisher_1}

## Nondimensional form
$$
\frac{\partial u}{\partial t} = \frac{\partial^2 u}{\partial x^2} +   u(1-u), \qquad x\in \mathbb R, \, \, t >0 
$$ with initial condition $$
u(x,0) = u_0(x).
$$ {#eq-fisher_1}

\vspace{5cm}


## Numerical solution
```{python}
#| label: fig-logisticpde
#| fig-cap: "Numerical solution of Fisher's equation."
#| code-fold: True

#  This code computes a numerical solution to Fishers equation
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt


# Define domain and discretise
T=100
L=100
N_x=100
N_t=100
t=np.linspace(1,T,N_t)
x=np.linspace(0,L,N_x)
dx=L/(N_x-1)
dt=T/(N_t-1)

# Initial condition
u_0=0.5*(1+np.tanh(-0.1*(x-20)))

# encode rhs of Fishers equation
def logisticPDErhs(u,t):
    N_x=len(u)
    f=np.zeros_like(u)
    for i in range(1,N_x-1):
      f[i]=1/dx**2*(u[i-1]-2*u[i]+u[i+1])+u[i]*(1-u[i])  


    i=0
    f[i]=1/dx**2*(-u[i]+u[i+1])+u[i]*(1-u[i]) 
    i=N_x-1

    f[i]=1/dx**2*(u[i-1]-u[i])+u[i]*(1-u[i]) 
    return f  

# Solve system of ODEs representing discretised PDE
sol=odeint(logisticPDErhs,u_0,t)

# Plot results
plt.plot(x, sol[0,:], 'r')
plt.plot(x, sol[4,:], 'b')
plt.plot(x, sol[8,:], 'm')
plt.plot(x, sol[12,:], 'k')
plt.legend(['t='+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])
plt.xlabel('$x$')
plt.grid()
plt.tight_layout()
plt.show()
```

## Spatially homogeneous solutions


## Travelling wave solutions 
In travelling wave coordinates
$$
\frac{ d^2W}{dz^2}+  v \frac{ dW}{dz} + W(1-W)  = 0. 
$$
\vspace{5cm}

## A pair of first order ODEs


$$
\begin{aligned}
\frac{ dW}{dz}& = P  = F(W,P), \\
\frac{ d P}{dz}&= -  v P - W(1-W)  = G(W,P).  
\end{aligned}
$$ 

\vspace{5cm}

## Numerical solution 

```{python}
#| label: fig-fishernumtravwave
#| fig-cap: " Numerical solution of the travelling wave problem in the  phase plane"
#| code-fold: True

# This code uses a shooting method to compute solutions of the travellign wave ODEs at different values of the wave speed
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

# Discretise domain
N_z=5000
z=np.linspace(1,T,N_z)

# Initial condition
u_0=[0.99,-0.0001]

# Different values of wavespeed
v_1=2.0
v_2=8.6
v_3=0.5

# rhs of travelling wave ODEs
def fisherTrWaveODErhs(u, t, v):
    f=np.zeros_like(u)
    reaction=u[0]*(1-u[0]) 

    f[0]=u[1]
    f[1]=-v*u[1]-reaction
    return f  

# Compute numerical solution of travelling wave ODEs
sol=odeint(fisherTrWaveODErhs,u_0,z, args=(v_1,))
sol2=odeint(fisherTrWaveODErhs,u_0,z, args=(v_2,))
sol3=odeint(fisherTrWaveODErhs,u_0,z, args=(v_3,))

# PLot results
fig, ax = plt.subplots(1,2)
ax[0].plot(sol[:,0],sol[:,1], 'r')
ax[0].plot(sol2[:,0],sol2[:,1], 'b')
ax[0].plot(sol3[:,0],sol3[:,1], 'k')
ax[0].set_xlim([-0.5, 1.05])
ax[0].set_xlabel('$u$')
ax[0].set_ylabel('$dW/dz$')

ax[1].plot(z,sol[:,0], 'r')
ax[1].plot(z,sol2[:,0], 'b')
ax[1].plot(z,sol3[:,0], 'k')
ax[1].set_xlim([-0.5, 100])

ax[1].set_xlabel('$z$')
ax[1].set_ylabel('$W$')
plt.legend(['v='+str(v_1),'v='+str(v_2), 'v='+str(v_3)])
plt.grid()
plt.tight_layout()
plt.show()

```


## Lecture   8 Recap

* Two steady states (saddle plus stable node)
* Confined set
* no oscillations


::: {.callout-note}
## PDE
$$
\frac{\partial u}{\partial t} = \frac{\partial^2 u}{\partial x^2} +   u(1-u), \qquad x\in \mathbb R, \, \, t >0 
$$ 
:::


::: {.callout-note}
## Travelling wave solution
$$
\frac{ d^2W}{dz^2}+  v \frac{ dW}{dz} + W(1-W)  = 0. 
$$
:::

## Recap

::: {.callout-note}
## Pair of first order ODEs
$$
\begin{aligned}
\frac{ dW}{dz}& = P  = F(W,P), \\
\frac{ d P}{dz}&= -  v P - W(1-W)  = G(W,P).  
\end{aligned}
$$ 
:::

Steady state: (0,0), (1,0)



## Linear stability analysis

## (0,0) is either a stable node or a stable spiral

## (1,0) is a saddle

## A heteroclinic trajectory

## A minimal wave speed

## Existence of a travelling wave solution

Strategy: 

* identify a confined set in $\Re^2$
* show no other steady states in confined set
* show no oscillatory solutions

Hence: trajectory that leaves (1,0) via unstable manifold must connect to stable manifold at (0,0)

## A confined set

Consider $$
T= \{ (W,P) : \, 0 \leq W \leq 1,\, \, P \leq 0, \, \,  P \geq \mu W \} 
$$ for some $\mu <0$.

\vspace{5cm}

## A confined set - ctd

## Lecture   8 Recap

* Two steady  states (saddle + stable node)
* Confined set
* No oscillations

## Finishing off the confined set

## No oscillations

Bendixson's Negative Criterion, Dulac's Negative Criterion

If there exists a function $\varphi(W,P)$, with $\varphi \in C^1(\mathbb R^2)$, such that 
$$
 \frac{\partial(\varphi F )}{\partial W} +  \frac{\partial(\varphi G )}{\partial P},
$$

has the same sign $(\neq 0)$ almost everywhere in a simply connected region (region without holes), then the system 
$$
 \begin{aligned}
 \dfrac{ dW}{dz} &= F(W,P) \; \\
   \dfrac{dP}{dz} &= G(W,P),
\end{aligned}
$$ 
has no periodic solutions in this region.

## Choosing $\phi$

\vspace{6cm}
For any $v>2$, there exists a travelling wave solution to Fisher's equation.

## Sign of the wave speed

Consider the travelling wave ODE

$$ 
\frac{d^2 W}{dz^2}+vW+W(1-W)=0
$$

\vspace{6cm}



## The bistable equation

$$
 \frac{\partial u}{\partial t} = \frac{\partial^2 u}{\partial x^2} +   f(u),\qquad x\in \mathbb R, \, \, t >0, 
$$ {#eq-bistable} 
with initial condition 
$$
u(x,0)=u_0(x),  \qquad x\in \mathbb R.
$$

Let 
$$
f(0) = f(a) = f(1)= 0, \quad \textrm{with} \quad  0<a<1.
$$
There are therefore three spatially uniform steady states $u_1 =0$, $u_2 =a$, $u_3=1$.

$$
f' (0) < 0, \quad  f'(a) >0 \quad \textrm{and} f'(1) <0
$$ 


$$
f=u(u-a)(1-u),
$$ 
which arises in the study of nerve action potentials along nerve fibres and other problems in *excitable media* (@keener2009mathematical).

## Numerical solution

```{python}
#| label: fig-bistablepde
#| fig-cap: "Travelling waves in a numerical solution of bistable PDE."
#| code-fold: True

# This codes computed and plots a numerical solution of bistable PDE

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt


# Define domain
T=100
L=100
N_x=100
N_t=100
t=np.linspace(1,T,N_t)
x=np.linspace(0,L,N_x)
dx=L/(N_x-1)
dt=T/(N_t-1)

# Model parameters
a=0.2

# Initial conditions
u_0=6*0.5*(1+np.tanh(-1*(x-50)))*0.5*(1+np.tanh(1*(x-50)))
u_0=0.5*(1+np.tanh(-1*0.2*(x-50)))

# function encodes the right-hand side omf the disretised PDE
def bistablePDErhs(u,t):
    N_x=len(u)
    f=np.zeros_like(u)
    for i in range(1,N_x-1):
      f[i]=1/dx**2*(u[i-1]-2*u[i]+u[i+1]) 
    i=0
    f[i]=1/dx**2*(-u[i]+u[i+1]) 
    i=N_x-1

    f[i]=1/dx**2*(u[i-1]-u[i])

    reaction=u*(u-a)*(1-u) 
    f= f+reaction 
    return f  

# Solve the system of ODES representing the disdcretised PDE
sol=odeint(bistablePDErhs,u_0,t)

# Plot results
plt.plot(x, sol[0,:], 'r')
plt.plot(x, sol[15,:], 'b')
plt.plot(x, sol[30,:], 'm')
plt.plot(x, sol[45,:], 'k')
plt.legend(['t='+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])
plt.xlabel('$x$')
plt.ylabel('$u$')

plt.grid()
plt.show()

```
## Lecture   9 
* Bistable equation

## Travelling wave ansatz

$$
 \frac{ d^2W}{dz^2}+  v \frac{ dW}{dz} + f(W)  = 0,
$$ 

In the phase plane
$$
\begin{aligned}
 \frac{ dW}{dz} = P = F(W,P) , \\
\frac{ d P}{dz}= -  v P - f(W)  = G(W,P),  
\end{aligned}
$$

## Steady states and their linear stability

##

## The sign of $v$


## Lecture 10

Recap: travelling wave analysis of bistable equation
$$
\begin{aligned}
 \frac{ dW}{dz} = P = F(W,P) , \\
\frac{ d P}{dz}= -  v P - f(W)  = G(W,P),  
\end{aligned}
$$

## Numerical shooting

```{python}
#| label: fig-bistablenumtravwave
#| fig-cap: "Using a shooting method to investigate travelling wave solutions. Continuity arguments suggest that there exists a travelling wave solution with v int he interval [0.38,0.48] such that a heteroclinic trajecotry connects (1,0) and (0,0). "
#| code-fold: True

# This code uses a shooting method to compute solutions of the travlling wave problem at different values of the wavespeed

import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt


# Model parameter
a=0.2

# Define and discretise z domain
N_z=5000
Z=20
z=np.linspace(1,Z,N_z)

# Initial condition
u_0=[0.99,-0.005]

# Different values of wave speed
v_1=0.38
v_2=0.48
v_3=0.68

# compute rhs of the travlling wave ODEs 
def bistableTrWaveODErhs(u, t, c):
    f=np.zeros_like(u)
    reaction=u[0]*(u[0]-a)*(1-u[0]) 

    f[0]=u[1]
    f[1]=-c*u[1]-reaction
    return f  

# numerically solve travelling wave ODEs at different values of the wavespeed
sol=odeint(bistableTrWaveODErhs,u_0,z, args=(v_1,))
sol2=odeint(bistableTrWaveODErhs,u_0,z, args=(v_2,))
sol3=odeint(bistableTrWaveODErhs,u_0,z, args=(v_3,))

# Plot results
fig, ax = plt.subplots(1)
python_indices1  = [index for index in range(N_z) if sol[index,1]<0]
python_indices2  = [index for index in range(N_z) if sol2[index,1]<0]
python_indices3  = [index for index in range(N_z) if sol3[index,1]<0]

plt.plot(sol[python_indices1,0],sol[python_indices1,1], 'r')
plt.plot(sol2[:,0],sol2[:,1], 'b')
plt.plot(sol3[:,0],sol3[:,1], 'k')
ax.set_xlim([-0.05, 1.05])
ax.set_ylim([-0.5, 0.5])
plt.xlabel('$W$')
plt.ylabel('$P$')
plt.legend(['v='+str(v_1),'v='+str(v_2), 'v='+str(v_3)])
plt.grid()
plt.show()

```
## A shooting method to prove the existence of a traveling wave

Outline

## Trajectories with small $v$ intersect the $P$ axis with $P<0$
Assume that $$
 \int\limits_{0}^{1}f(u) \, du > 0.
$$

## Trajectories with large $v$ intersect the $W$ axis with $W>0$

## Continuity there exists a trajectory with intermediate $v$ that passes through the origin


# Systems of coupled reaction diffusion equations

## Lotka Volterra with diffusion
$$
\begin{aligned}
\frac{\partial u}{\partial t} &= \rho \, u \left( 1 - \frac u K\right) - \alpha\, u \,  n + D_u \Delta u, \\
\frac{\partial n}{\partial t} &= \beta \; u\, n - \gamma \; n + D_n \Delta n,
\end{aligned} 
$$ {#eq-pp_eq}

## Nondimensional form
$$
\begin{aligned}
\dfrac{\partial u}{\partial t} =  u ( 1 - u - n)  + D \dfrac{\partial^2 u}{\partial x^2}\; = \; f(u,n) + D\dfrac{\partial^2 u}{\partial x^2}, \quad x\in \mathbb R , t>0 \,,  \\
 \dfrac{\partial n}{\partial t} = a\,  n(u -b) + \dfrac{\partial^2  n}{\partial x^2}\; =  g(u,n) + \dfrac{\partial^2  n}{\partial x^2},  \qquad x\in \mathbb R, t>0,
 \end{aligned}
$$ {#eq-pp_eq_2}

\vspace{5cm}

## Spatially homogeneous steady states


## Lecture 11


Recap
$$
\begin{aligned}
\dfrac{\partial u}{\partial t} =  u ( 1 - u - n)  + D \dfrac{\partial^2 u}{\partial x^2}\; = \; f(u,n) + D\dfrac{\partial^2 u}{\partial x^2}, \quad x\in \mathbb R , t>0 \,,  \\
 \dfrac{\partial n}{\partial t} = a\,  n(u -b) + \dfrac{\partial^2  n}{\partial x^2}\; =  g(u,n) + \dfrac{\partial^2  n}{\partial x^2},  \qquad x\in \mathbb R, t>0,
 \end{aligned}
$$


Spatially hom. steady states: 

* $(0,0)$ - extinction - lin. unstable 
* $(1,0)$ - no predator, lin unstable
* $(b,1-b)$ - coexistence - lin. stable

Question: do travelling wave solutions exist that connect the spatially homogeneous stable steady state to either of the unstable steady states?





##  A travelling wave that connects $(1,0)$ and $(b,1-b)$

$$
\begin{aligned}
u(x,t) &= W(x+ vt) = W(z), \quad v>0, \\
n(x,t) &= N( x + vt) = N(z), \quad v >0.
\end{aligned}
$$
\vspace{5cm}

## The limit of fast diffusing predator


## Three first order ODEs
$$
\begin{aligned}
\frac{dW}{dz} &= \frac 1 v W(1-W-N) = F(W,N,P),\\
\frac{dN}{dz} &= P  = G(W, N,P),\\
\frac{dP}{dz} &= v P - a N(W-b)  = R(W,N,P). 
\end{aligned}
$$ {#eq-tw_pp_3}

\vspace{6cm}

## Steady states and their linear stability

## Steady states and their linear stability


## Lecture 12

* steady states: $(0,0,0)$, $(1,0,0)$, $(b,1-b,0)$
* Heteroclinic trajectory from (1,0,0) to $(b,1-b,0)$
* (1,0,0) has a 2 dim unstable manifold
* Eigenvalues at $(b,1-b,0)$ satisfy
$$
\lambda^3 - \lambda^2(v- \frac b v) - \lambda b - \frac 1 v ab(1-b) = p(\lambda) =0.
$$

## TPs are independent of $a$

## p(\lambda) has a real positive root and two roots with negative real part

## Plotting the cubic
``` {python}
#| label: fig-cubic
#| fig-cap: "Plot of cubic."
#| code-fold: True

import numpy as np
import matplotlib.pyplot as plt


# discretise lambda
lam=np.linspace(-1.2,1.2,100)

# Define parameters
a=0.0
a2=0.05
a3=0.2
b=0.2
v=0.5

# Compute polynomials
p1= lam**3-lam**2*(v-b/v)-lam*b-1/v*a*b*(1-b)
p2= lam**3-lam**2*(v-b/v)-lam*b-1/v*a2*b*(1-b)
p3= lam**3-lam**2*(v-b/v)-lam*b-1/v*a3*b*(1-b)

# plot
fig, ax= plt.subplots()
ax.plot(lam,p1,lam,p2,lam,p3)
ax.set_xlabel('$\lambda$')
ax.set_ylabel('$p(\lambda$)')

ax.grid(True)

```

## Aggregation via chemotaxis

* *Dictyostelium discoideum* (Dicty) is a slime-mold that is widely studied experimentally as a model organism.  
* under nutrient starvation, it exhibits complex collective behaviour
* individual amoebae that constitute a slime-mold exhibit a range of phenomena also observed in mammalian cells e.g. differentiation, proliferation, migration.


![Spiral wave patterns underly Dictystelium aggregation.](CG-14-355_F2.jpg){#fig-dicty_spiral}

How do simple rules give rise to complex behaviours?

## A chemotactic model

## A 1D spatial domain with no-flux boundary conditions


## Lecture 13

Domain:
$$x\in[0,L], t>0$$

PDE:
$$
\begin{aligned}
\frac{\partial n}{\partial  t} &=  D_n \frac{\partial ^2 n}{\partial x^2} - \chi_0 \frac{\partial}{\partial x} \left( n \frac{\partial a}{\partial x} \right), \\
  & & \hspace{4.5cm} \\
\frac{\partial a}{\partial  t} &=  D_a \frac{\partial ^2 a}{\partial x^2}  +  \mu n - \delta a,
\end{aligned}
$$ {#eq-chemotaxis1d}

Boundary conditions:

$$
\frac{\partial a}{\partial  x} = \frac{\partial n}{\partial  x} = 0, \;\;\; x = 0,L.
$$

ICs:



## numerical solution

```{python}
#| label: fig-bacterialchemotaxispde
#| fig-cap: "Numerical solution of bacterial chemtaxis model."
#| code-fold: True
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
import random


# Define domain and discretise
T=80
L=150
N_x=200
N_t=100
t=np.linspace(1,T,N_t)
x=np.linspace(0,L,N_x)
dx=L/(N_x-1)
dt=T/(N_t-1)


# Define model parameters
mu=1.2
delta=0.1
D_n=2.50
D_a=2.5
chi_0=1.4


# Define initial conditions
u_0=np.ones_like(x)+0.01*np.random.uniform(low=0.0, high=0.1, size=(N_x,))
n_0=np.ones_like(x)
u_0=np.concatenate((u_0,n_0))


# Function to compute rhs of discretised PDEs
def LVPDErhs(sol,t):

    N_x=int(np.ceil(len(sol)/2))

    n=sol[0:N_x]
    a=sol[N_x:2*N_x]


    # arrays to store rhs for the two dep variables
    f_n=np.zeros_like(n)
    f_a=np.zeros_like(n)

    for i in range(1,N_x-2):
      f_n[i]=D_n/dx**2*(n[i-1]-2*n[i]+n[i+1]) - chi_0*n[i]*1/dx**2*(a[i-1]-2*a[i]+a[i+1])-chi_0/(2*dx)**2*(a[i+1]-a[i-1])*(n[i+1]-n[i-1])

    # No flux BC
    i=0
    f_n[i]=D_n/dx**2*(-n[i]+n[i+1]) - chi_0*n[i]*1/(2*dx)**2*(-a[i]+a[i+1])-chi_0/(2*dx)**2*(a[i+1]-a[i])*(n[i+1]-n[i])
    # No flux BC

    i=N_x-1
    f_n[i]=D_n/dx**2*(n[i-1]-n[i])- chi_0*n[i]*1/(2*dx)**2*(a[i-1]-a[i])-chi_0/(2*dx)**2*(a[i]-a[i-1])*(n[i]-n[i-1])


    for i in range(1,N_x-2):
      f_a[i]=D_a/dx**2*(a[i-1]-2*a[i]+a[i+1]) 
    
    # No flux BC
    i=0
    f_a[i]=D_a/dx**2*(-a[i]+a[i+1]) 
    # No flux BC
    i=N_x-1
    f_a[i]=D_a/dx**2*(a[i-1]-a[i])

    reaction_n=0
    reaction_a=mu*n-delta*a

    f_n=f_n+reaction_n
    f_a=f_a+reaction_a

    f= np.concatenate((f_n, f_a)) 
    return f  

# Integrate discretised ODEs
sol=odeint(LVPDErhs,u_0,t)

n=sol[:,0:N_x]
a=sol[:,0:N_x]

# Plot solutions
fig, ax = plt.subplots(2,1)

ax[0].plot(x,n[0,:],'r')
ax[0].plot(x,n[16,:],'b')
ax[0].plot(x,n[32,:],'m')
ax[0].plot(x,n[48,:],'k')
ax[0].set_xlabel('$x$')
ax[0].set_ylabel('$n$')

ax[1].plot(x, a[0,:],'r--')
ax[1].plot(x, a[16,:],'b--')
ax[1].plot(x, a[32,:],'m--')
ax[1].plot(x, a[48,:],'k--')
ax[1].set_xlabel('$x$')
ax[1].set_ylabel('$a$')

plt.legend(['t='+ str(t[0]),'t='+ str(t[4]),'t='+ str(t[8]),'t='+ str(t[12])])
plt.xlabel('$x$')
plt.grid()
plt.tight_layout()
plt.show()
```

## Conservation of cell number

## Spatially homogeneous solutions

## Linearisation about the spatially homogeneous steady state
$$
n(x,t) = n^* + \tilde{n}(x,t), \;\;\; a(x,t) = a^* + \tilde{a}(x,t)
$$
\vspace{7cm}

## Separable solution
$$
\tilde{n}(t,x) = u(t) \phi_1(x), \quad \tilde a (t,x) = v(t) \phi_2(x)
$$

\vspace{7cm}

## The elliptic problem
$$
\begin{aligned}
\frac{d^2 \phi}{dx^2} &= - k^2 \phi && \text{ in } \; (0,L), \\
\frac{d \phi}{dx} &= 0  && \text{ for } \; x=0, \; x=L. 
\end{aligned}
$$
\vspace{7cm}

## $\phi_1=\phi2=\phi$

## Linear system solution
$$
u(t) = C_1 e^{\lambda t} \quad \textrm{and} \quad v(t) = C_2 e^{\lambda t}
$$
\vspace{7cm}


## Lecture 13 - Recap
Domain:
$$x\in[0,L], t>0$$

PDE:
$$
\begin{aligned}
\frac{\partial n}{\partial  t} &=  D_n \frac{\partial ^2 n}{\partial x^2} - \chi_0 \frac{\partial}{\partial x} \left( n \frac{\partial a}{\partial x} \right), \\
  & & \hspace{4.5cm} \\
\frac{\partial a}{\partial  t} &=  D_a \frac{\partial ^2 a}{\partial x^2}  +  \mu n - \delta a,
\end{aligned}
$$ {#eq-chemotaxis1d}

Boundary conditions:

$$
\frac{\partial a}{\partial  x} = \frac{\partial n}{\partial  x} = 0, \;\;\; x = 0,L.
$$

ICs:

## Method

- Linearise about the steady state
- Separation of variables 
$\tilde{n}(x,t)=u(t)\phi(x)$
$\tilde{a}(x,t)=v(t)\phi(x)$
- Eigenvalues of the Laplacian operator
 $$ \frac{d^2 \phi}{dx^2}=-k^2 \phi, \quad k=\frac{\bar{n}\pi}{L}, \bar{n} \in Z $$
 - Linear ODEs in $u(t)$ and $v(t)$
 - For instability of spatially homogeneous steady state, require $\Re\{\lambda>0\}$.


## Eigenvalue equation
$$ 
\lambda^2 + \left( D_n k^2 + D_a k^2 + \delta \right) \lambda + D_n k^2 \left( D_a k^2 + \delta \right) - \mu \chi_0 n^* k^2 = 0.
$$
\vspace{7cm}

## Conditions for instability of spatially homogeneous pattern




## Lecture 16 - Diffusion driven instability
$$
\begin{aligned}
\frac{\partial A}{\partial  t} & =  F(A,B)  + D_A \nabla^2 A, \\
\frac{\partial B}{\partial  t} & =  G(A,B)  + D_B \nabla^2 B,
\end{aligned}
$$
\vspace{7cm}

No-flux boundary conditions:

$$\mathbf{n}.\nabla A =\mathbf{n}.\nabla B=0, x \in \partial \Omega. $$

## Reaction kinetics

Schnackenberg
$$
F(A,B) = k_1 - k_2 A + k_3 A^2 B, \;\;\;\; G(A,B) = k_4 - k_3 A^2 B
$$

Gierer Meinhardt:
$$
F(A,B) = k_1 - k_2 A + \frac{k_3 A^2}{B}, \quad G(A,B) = k_4 A^2 - k_5 B
$$

Thomas:
$$
\begin{aligned}
F(A,B) &= k_1 - k_2 A - H(A,B), \\
G(A,B) &= k_4 A^2 - k_4 B -H(A,B), \\ 
H(A,B) &= \frac{k_5 AB}{k_6 + k_7 + k_8 A^2}.
\end{aligned}
$$

## Nondimensionalisation of Schnakenberg model

Using the scaling

$$
u = A \left( \frac{k_3}{k_2} \right)^{1/2}, \quad v = B \left( \frac{k_3}{k_2} \right)^{1/2}, \quad t^* = \frac{D_A t}{L^2},\quad x^* = \frac{x}{L},
$$

$$
\begin{aligned}
\frac{\partial u}{\partial  t} & = \gamma ( a - u + u^2 v ) + \nabla^2 u = \gamma f(u,v)  + \nabla^2 u, \\
\frac{\partial v}{\partial  t} & = \gamma ( b - u^2 v ) + d \nabla^2 v = \gamma g(u,w)  + d \nabla^2 v, 
\end{aligned}
$$ {#eq-schnackenbergeqns}

##  Interpretation of Schnackenberg model: short range activation/long range inhibition 

![](activator_inhibitor.png){#fig-ai}

## General form for nondimensionalised RD model
$$
\begin{aligned}
\frac{\partial u}{\partial  t} & = \gamma f(u,v)  + \nabla^2 u, \\
\frac{\partial v}{\partial  t} & = \gamma g(u,w)  + d \nabla^2 v, 
\end{aligned}
$$
\vspace{7cm}

Interpretation:

* $\gamma$
* $d$



## Numerical solution

```{python}
import numpy as np
from scipy.integrate import odeint
from scipy.integrate import solve_ivp

import matplotlib.pyplot as plt
import random



# Model parameters
gamma=650.0
a=0.2
b=1.3
d=25.0


# Define and discretise domain
T=5
L=1
N_x=20
N_t=30
t=np.linspace(1,T,N_t)
x=np.linspace(0,L,N_x)
y=np.linspace(0,L,N_x)
dx=L/(N_x-1)
dt=T/(N_t-1)

# Define initial conditions
[x,y]=np.meshgrid(x,y)

u_0=(a+b)*np.ones_like(x)+0.01*np.random.uniform(low=-1.0, high=1.0, size=(N_x,N_x))
v_0=b*(1/(a+b)**2)*np.ones_like(x)+0.01*np.random.uniform(low=-1.0, high=1.0, size=(N_x,N_x))

u_0=np.concatenate((np.ravel(u_0),np.ravel(v_0)))



# Compute rhs of discretised PDE

def ShcnackPDErhs2d(sol,t):

    num_nodes=int(np.ceil(len(sol)/2))

    u=sol[0:num_nodes]
    v=sol[num_nodes:]


    u=np.reshape(u,(N_x,N_x))
    v=np.reshape(v,(N_x,N_x))

    f_u=np.zeros_like(u)
    f_v=np.zeros_like(u)

 
    # Interior nodes
    for i in range(1,N_x-2):
      for j in range(1,N_x-2):
        f_u[i,j]=1/dx**2*(u[i-1,j]-4*u[i,j]+u[i+1,j]+u[i,j+1]+u[i,j-1]) 
        f_v[i,j]=d/dx**2*(v[i-1,j]-4*v[i,j]+v[i+1,j]+v[i,j+1]+v[i,j-1]) 
    
    # LHS BC

    i=0 
    for j in range(1,N_x-2):
      f_u[i,j]=1/dx**2*(-3*u[i,j]+u[i+1,j]+u[i,j+1]+u[i,j-1]) 
      f_v[i,j]=d/dx**2*(-3*v[i,j]+v[i+1,j]+v[i,j+1]+v[i,j-1]) 
    # RHS BC

    i=N_x-1
    for j in range(1,N_x-2):
      f_u[i,j]=1/dx**2*(u[i-1,j]-3*u[i,j]+u[i,j+1]+u[i,j-1]) 
      f_v[i,j]=d/dx**2*(v[i-1,j]-3*v[i,j]+v[i,j+1]+v[i,j-1])   
    # bottom BC

    j=0
    for i in range(1,N_x-2):
        f_u[i,j]=1/dx**2*(u[i-1,j]-3*u[i,j]+u[i+1,j]+u[i,j+1]) 
        f_v[i,j]=d/dx**2*(v[i-1,j]-3*v[i,j]+v[i+1,j]+v[i,j+1]) 
    # Top BC

    j =N_x-1
    for i in range(1,N_x-2):
        f_u[i,j]=1/dx**2*(u[i-1,j]-3*u[i,j]+u[i+1,j]+u[i,j-1]) 
        f_v[i,j]=d/dx**2*(v[i-1,j]-3*v[i,j]+v[i+1,j]+v[i,j-1])  
    
    # Bottom left corner

    i=0
    j=0
    f_u[i,j]=1/dx**2*(-2*u[i,j]+u[i+1,j]+u[i,j+1]) 
    f_v[i,j]=d/dx**2*(-2*v[i,j]+v[i+1,j]+v[i,j+1]) 
    # Bottom right corner

    i=0
    j=N_x-1
    f_u[i,j]=1/dx**2*(-2*u[i,j]+u[i+1,j]+u[i,j-1]) 
    f_v[i,j]=d/dx**2*(-2*v[i,j]+v[i+1,j]+v[i,j-1]) 
    # Top left corner

    i=N_x-1
    j=0

    f_u[i,j]=1/dx**2*(u[i-1,j]-2*u[i,j]+u[i,j+1]) 
    f_v[i,j]=d/dx**2*(v[i-1,j]-2*v[i,j]+v[i,j+1]) 
    # Top right corner
   
    i=N_x-1
    j=N_x-1


    f_u[i,j]=1/dx**2*(-2*u[i,j]+u[i-1,j]+u[i,j-1]) 
    f_v[i,j]=d/dx**2*(-2*v[i,j]+v[i-1,j]+v[i,j-1]) 


    reaction_u=gamma*(a-u+(u**2)*v)
    reaction_v=gamma*(b-(u**2)*v)

    f_u=f_u+reaction_u
    f_v=f_v+reaction_v

    f= np.concatenate((np.ravel(f_u),np.ravel(f_v))) 
    return f  

# Numerically solve discretised ODEs
sol=odeint(ShcnackPDErhs2d,u_0,t)


# Grab solution at time 1 and reshape into square domain
u_0=sol[0,0:N_x**2]
v_0=sol[0,N_x**2:]
u_0=np.reshape(u_0,(N_x,N_x))
v_0=np.reshape(v_0,(N_x,N_x))

# Grab solution at time 20 and reshape into square domain

u_m=sol[20,0:N_x**2]
v_m=sol[20,N_x**2:]
u_m=np.reshape(u_m,(N_x,N_x))
v_m=np.reshape(v_m,(N_x,N_x))

u=sol[-1,0:N_x**2]
v=sol[-1,N_x**2:]
u=np.reshape(u,(N_x,N_x))
v=np.reshape(v,(N_x,N_x))

# Plot results
fig, ax = plt.subplots(2,3)
ax[0,0].imshow(u_0)
ax[1,0].imshow(v_0)
ax[0,1].imshow(u_m)
ax[1,1].imshow(v_m)
ax[0,2].imshow(u)
ax[1,2].imshow(v)

ax[0,0].set_xlabel('$x$')
ax[0,1].set_xlabel('$x$')
ax[0,2].set_xlabel('$x$')
ax[1,0].set_xlabel('$x$')
ax[1,1].set_xlabel('$x$')
ax[1,2].set_xlabel('$x$')

ax[0,0].set_ylabel('$y$')
ax[0,1].set_ylabel('$y$')
ax[0,2].set_ylabel('$y$')
ax[1,0].set_ylabel('$y$')
ax[1,1].set_ylabel('$y$')
ax[1,2].set_ylabel('$y$')


plt.xlabel('$x$')
plt.tight_layout()

plt.show()
```



## Deriving general conditions for diffusion-driven instability

Let  $\Omega \subset R^n$ be a domain with smooth (sufficiently regular) boundary $\partial \Omega$, with outward unit normal ${\mathbf{n}}$.

$$
\begin{aligned}
&\frac{\partial u}{\partial  t} = \gamma\, f(u,v)  +  \nabla^2 u, \qquad x\in \Omega, \quad t>0, \\
&\frac{\partial v}{\partial  t} = \gamma\, g(u,v)  + d \nabla^2 v, \qquad x\in \Omega, \quad t>0, \\
&
\end{aligned}
$$ {#eq-pp}

Boundary and initial conditions 
$$
\begin{aligned}
\nabla u \cdot {\mathbf{n} } = 0, \qquad \nabla v \cdot {\mathbf{n} } = 0, \qquad x\in \partial \Omega, \quad t>0, \\
u(x,0)  = u_0(x), \qquad  v(x,0)  = v_0(x), \qquad x\in \Omega\; .
\end{aligned}
$$ {#eq-pp_bc}

##  Conditions for diffusion driven instability
$$
\begin{aligned}
f_u + g_v &< 0, \\
f_u g_v - f_v g_u &> 0, \\
d f_u + g_v &> 0, \\
(d f_u + g_v)^2 - 4d (f_u g_v - f_v g_u)^2 &< 0 , \nonumber 
\end{aligned}
$$ {#eq-pattern_conditions}


## A spatially homogeneous steady-state
A *spatially homogeneous steady-state* of @eq-pp and @eq-pp_bc satisfies 
$$
f(u_0,v_0) = g(u_0,v_0) =0.
$$

For linear stability
$$
\begin{aligned}
f_u + g_v &< 0, \\
f_u g_v - f_v g_u &> 0
\end{aligned}
$$

Here 
$$
f_u = \frac{\partial f}{\partial u}_{(u_0,v_0)} 
$$
etc.

## Spatially dependent perturbations

$$
u(x,t) = u_0 + \tilde u(x,t), \quad  v(x,t) = v_0 + \tilde v(x,t), \qquad \|\tilde u(x,t) \| \ll 1, \quad  \|\tilde v(x,t) \| \ll 1.
$$
\vspace{6cm}

## Separation of variables

$$
V(x,t) =\begin{pmatrix}  
 \bar u(t)  \varphi_1(x)
 \\
 \bar v(t)  \varphi_2(x)
 \end{pmatrix},
$$

\vspace{6cm}

## A set of basis functions

## Returning to the vectorised form of equations

## A modified Jacobian for spatially heterogeneous perturbations

## Lecture 18  Recap


For linear instability of spatially homogeneous steady state:

$$
\det(\tilde J) = h(k^2) = dk^4  - \gamma ( d\,  f_u + g_v) k^2 + \gamma^2 \det(J) < 0. 
$$

##
$$
d f_u + g_v >0.
$$

##
$$
\frac{(df_u + g_v)^2}{4d} > |J|.
$$

##   Instability for a limited range of wavenumbers

```{python}
#| label: fig-dispersion
#| fig-cap: 
#|  - "A plot of $h(k^2)$ plotted against $k^2$. Shaded region denotes unstable wave numbers in case of largets $d$."
#|  - "The real part of the eigenvalue plotted against $k^2$."
#| code-fold: True
import numpy as np
import matplotlib.pyplot as plt

# discrtise k^2 for plotting
k_sq_max=35
k_sq_min_plot=6.4
k_sq=np.linspace(0,k_sq_max,100)


# Some made up numbers for this example
gamma=100.0
d_1=3.0
d_2=6.0

f_u=0.4
g_v=-0.5
J=0.1 # positive determinant


# Compute h - defined in notes -DDI possible  this is negative
def Computeh(k_sq,d):
  term1=d*f_u+g_v

  h=d*k_sq**2-gamma*(term1)*k_sq+ gamma**2*J
  return h

# Compute Re lambda - DDI when this is positive

def SolveReLambda(k_sq,d):
   # a lam^2 + b * lam +c
    a=1
    b= k_sq*(1+d)-gamma*(f_u+g_v)
    c= Computeh(k_sq,d)
    lambda_m= (-b-np.sqrt(b**2-4*a*c))/(2*a)
    lambda_p= (-b+np.sqrt(b**2-4*a*c))//(2*a)
    return lambda_m,lambda_p


# Test if DDI conditions are satisfied
def TestDDIconditions(d):

    cond_1=f_u+g_v
    cond_2 = J
    cond_3 = d*f_u+g_v
    cond_4 = (d*f_u+g_v)**2-4*d*J

    cond_true=np.zeros((4,1),dtype=bool)
    cond_true[0]=(cond_1<0) 
    cond_true[1]= (cond_2>0) 
    cond_true[2]= (cond_3>0)
    cond_true[3]=(cond_4<0)


    return cond_true

h_1=Computeh(k_sq,d_1)
h_2=Computeh(k_sq,d_2)

l_1_m, l_1_p = SolveReLambda(k_sq,d_1)
l_2_m, l_2_p = SolveReLambda(k_sq,d_2)

conditions_satisfied1=TestDDIconditions(d_1)
conditions_satisfied2=TestDDIconditions(d_2)


# Plot results
fig, ax=plt.subplots()
ax.plot(k_sq,h_1,'r',k_sq,h_2,'k')
ax.set_xlabel('$k^2$')
ax.set_ylabel('$h$')
ax.legend(['d='+str(d_1),'d='+str(d_2)])
ax.set_ylim([-1000,4000])
ax.fill_betweenx ([-1000, 4000], [k_sq_min_plot], [25],alpha=0.2)
ax.set_xlim([0,k_sq_max])

plt.show()

fig, ax=plt.subplots()
ax.plot(k_sq,np.real(l_1_m),'r',k_sq,np.real(l_2_m),'k')
ax.plot(k_sq,np.real(l_1_p),'r--',k_sq,np.real(l_2_p),'k--')

plt.grid()
ax.set_xlabel('$k^2$')
ax.set_ylabel('$\Re\{\lambda\}$')
ax.set_ylim([-100,25])
ax.fill_betweenx ([-100, 5], [k_sq_min_plot], [25],alpha=0.2)
ax.set_xlim([0,k_sq_max])

ax.legend(['d='+str(d_1),'d='+str(d_2)])
plt.show()

```

## Summary - DDI conditions

$$
\begin{aligned}
f_u + g_v &< 0, \\
f_u g_v - f_v g_u &> 0, \\
d f_u + g_v &> 0, \\
(d f_u + g_v)^2 - 4d (f_u g_v - f_v g_u)^2 &< 0 , \nonumber 
\end{aligned}
$$ {#eq-pattern_conditions}



## The SIR model

Assumptions

-   Total population is constant: the duration of the epidemic is short compared to the lifetime of its hosts, so we can neglect birth and disease-unrelated death

-   Consider a disease which, after recovery, confers immunity (and/or death if lethal)

- Population is well mixed (spatially homogenous)



## SIR model - variables
-   $S$ -- susceptibles - can be infected
-   $I$ -- infectives - have the disease and can transmit to susceptibles
-   $R$ -- recovered (removed) - have had the disease and are no longer infective.

Progress through the disease 
$$
S \longrightarrow I \longrightarrow R 
$$

## SIR model - ODEs

$$
\begin{aligned}
\frac{d S}{d t} &= - r SI, \\
\frac{d I}{d t} &= r SI - a I \\
\frac{d R}{e t} &= a I 
\end{aligned}
$$ {#eq-sirpde}


Epidemic: 
$$
rS_0 >a \implies R_0:=\frac{rS_0}{a}>1
$$

## Spatio-temporal model

$$
\begin{aligned}
\frac{\partial S}{\partial t} &= - r SI + D_S \frac{ \partial^2 S}{\partial x^2}\; ,  \quad x \in \mathbb R ,  t>0 \; , \\
\frac{\partial I}{\partial t} &= r SI - a I+ D_I \frac{ \partial^2 I}{\partial x^2} \; ,  \quad x \in \mathbb R , \; t>0 \; , \\
\frac{\partial R}{\partial t} &= a I + D_R \frac{ \partial^2 R}{\partial x^2} \; ,  \quad x \in \mathbb R , \; t>0 \; \\
S(0,x) &= S_0(x), \qquad I(0,x) = I_0(x), \quad R(0,x) = R_0(x), \qquad x \in \mathbb R \; , 
\end{aligned}
$$ {#eq-sirpde}


## Nondimensionalise

Defining
$$
i = \frac I{\bar S_0} , s = \frac S{\bar S_0} ,  \quad x^\ast = \left(\frac{ r \bar S_0}{D_I} \right)^{1/2} x, \tau = r \bar S_0 t 
$$ 

we obtain (after dropping $`\ast'$)

$$
\begin{aligned}
& \frac{\partial s}{\partial t} = -  si + d \frac{ \partial^2 s}{\partial x^2}\; , & \qquad x \in \mathbb R , \; t>0 \; , \\
& \frac{\partial i}{\partial \tau} = si - \mu i+  \frac{ \partial^2 i}{\partial x^2} \; ,  & \qquad x \in \mathbb R , \; t>0 \; , \\
& s(x,0) = \frac{S_0(x)}{\bar S_0}, \qquad i(x,0) = \frac{I_0(x)}{\bar S_0},  & \quad x \in \mathbb R \; ,
\end{aligned}
$$ where $\bar S_0$ is a representative population density and $\mu = a /{ r \bar S_0}$.


## Aim
- investigate the spatial spread of an epidemic wave of infectives into a uniform susceptibles population $S_0(x) =\bar S_0$.
-  determine conditions for existence of an epidemic wave and propagation speed.

##  Travelling wave analysis

$$
s(x,t) = \bar{s}(z), \quad i(x,t) = \bar{i}(z), \quad z = x - v t, \quad v >0
$$ 

## Boundary conditions

$$
\begin{aligned}
\bar{s}(z) \to 1 \qquad  z\to + \infty, \quad \qquad  \bar{i}(z) \to 0 \qquad  z\to + \infty\; ,\\
\bar{s}(z) \to \sigma \qquad  z\to - \infty, \quad \qquad  \bar{i}(z) \to 0 \qquad  z\to - \infty\; ,\\
\bar{s}^\prime(z) \to 0\qquad  z\to \pm \infty, \quad \qquad \bar{i}^\prime(z) \to 0 \qquad z \to \pm \infty \; ,
\end{aligned}
$$ {#eq-sir_tw_bc} 
where 
$0 \leq \sigma <1$.
\vspace{4cm}

\vspace{4cm}

## Steady states of the travelling wave problem

$$
(s^*, i^*) = ( 1, 0), \qquad (s^*, i^*) = (\sigma, 0)
$$
\vspace{4cm}

## A heteroclinic connection 

## Writing as a system of first order ODEs

## Linearistation and a minimum wavespeed

## The solution profile at the leading edge of the epidemic front 

## Spatial spread of rabies among foxes
$$
\begin{aligned}
& \frac{\partial S}{\partial t} = -  SI \; , & \qquad x \in \mathbb R , \; t>0 \; , \\
& \frac{\partial I}{\partial t} = SI - \mu I+  \frac{ \partial^2 I}{\partial x^2} \; ,  & \qquad x \in \mathbb R , \; t>0 \; , \\
& S(0,x) = 1, \qquad I(0,x) = \frac{I_0}{\bar S_0},  & \quad x \in \mathbb R \; ,
\end{aligned}
$$ {#eq-sir3}
\vspace{5cm}

## Travelling wave equations
Considering 
$$
S(t,x) = s(z), \quad I(t,x) = i(z), \quad z = x - v t, \quad v >0
$$ 

$$
\begin{aligned}
&  v s^\prime = i s  \; , \\
& i^{\prime \prime} + v i^\prime + i s - \mu i= 0\; 
\end{aligned}
$$ {#eq-sir_tw_2} 


## Travelling wave equations + boundary conditions
$$
\begin{aligned}
s(z) \to 1 \qquad  z\to + \infty, \quad \qquad  i(z) \to 0 \qquad  z\to + \infty\; ,\\
s(z) \to \sigma \qquad  z\to - \infty, \quad \qquad  i(z) \to 0 \qquad  z\to - \infty\; ,\\
s^\prime(z) \to 0\qquad  z\to \pm \infty, \quad \qquad i^\prime(z) \to 0 \qquad z \to \pm \infty \; ,
\end{aligned}
$$ {#eq-sir_tw_bc_2} where $0 \leq \sigma <1$.

## Steady states and a minimal wave speed

## The susceptible density behind the wavefront


-->
